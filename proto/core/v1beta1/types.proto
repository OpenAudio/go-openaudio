syntax = "proto3";

package core.v1beta1;

import "ddex/v1beta1/ern.proto";
import "ddex/v1beta1/mead.proto";
import "ddex/v1beta1/pie.proto";

option go_package = "github.com/OpenAudio/go-openaudio/pkg/api/core/v1beta1";

message Signature {
  enum SignatureType {
    SIGNATURE_TYPE_UNSPECIFIED = 0;

    // Signs arbitrary bytes with a prefix: "\x19Ethereum Signed Message:\n"
    SIGNATURE_TYPE_PERSONAL = 1;

    // Signs arbitrary bytes without prefix (just raw keccak256 hash)
    SIGNATURE_TYPE_ETHSIGN = 2;

    // EIP-712 typed structured data signing (e.g., eth_signTypedData_v4)
    SIGNATURE_TYPE_EIP712 = 3;
  }

  SignatureType type = 1;
  bytes signature = 2;
}

// CometBFT Transaction
message Transaction {
  Signature signature = 1;
  Envelope envelope = 2;
}

// DDEX Envelope
message Envelope {
  EnvelopeHeader header = 1;
  repeated Message messages = 2;
}

message EnvelopeHeader {
  string chain_id = 1;
  int64 expiration = 2;
  string nonce = 3;
  string from = 4;
  string to = 5;
}

// DDEX-style messages (oneof schema)
message Message {
  oneof message {
    ddex.v1beta1.NewReleaseMessage ern = 1;
    ddex.v1beta1.MeadMessage mead = 2;
    ddex.v1beta1.PieMessage pie = 3;
    // ddex.v1beta1.DsrMessage dsr = 4;
    //ddex.v1beta1.CdmMessage cdm = 5;
  }
}

message TransactionReceipt {
  // Basic transaction identification
  string tx_hash = 1;
  int64 height = 2;
  int64 timestamp = 3;

  // Transaction parties
  string sender = 4; // Who signed the transaction
  string responder = 5; // Node that responded to the request
  string proposer = 6; // Node that proposed the block that included the transaction

  // Envelope information from the transaction
  EnvelopeReceiptInfo envelope_info = 7;

  // Results from message processing (addresses, IDs, etc.)
  repeated MessageReceipt message_receipts = 8;

  // Error information
  optional TransactionError error = 9;
}

message MessageReceipt {
  int32 message_index = 1;
  oneof result {
    ddex.v1beta1.NewReleaseMessageAck ern_ack = 2;
    ddex.v1beta1.MeadMessageAck mead_ack = 3;
    ddex.v1beta1.PieMessageAck pie_ack = 4;
    // ddex.v1beta1.DsrMessageAck dsr_ack = 5;
    // ddex.v1beta1.CdmMessageAck cdm_ack = 6;
  }
}

message EnvelopeReceiptInfo {
  string chain_id = 1;
  int64 expiration = 2;
  string nonce = 3;
  int32 message_count = 4;
  string from = 5;
  string to = 6;
}

message TransactionError {
  enum ErrorCode {
    ERROR_CODE_UNSPECIFIED = 0;
    // validation errors
    ERROR_CODE_INVALID_SIGNATURE = 1;
    ERROR_CODE_INVALID_ENVELOPE = 2;
    ERROR_CODE_INVALID_MESSAGE = 3;

    // authorization errors
    ERROR_CODE_UNAUTHORIZED = 4;
    ERROR_CODE_INSUFFICIENT_PERMISSIONS = 5;

    // business logic errors
    ERROR_CODE_NOT_FOUND = 6;
    ERROR_CODE_TIMEOUT = 7;
    ERROR_CODE_IM_A_TEAPOT = 8;
    ERROR_CODE_TOO_MANY_REQUESTS = 9;

    // system errors
    ERROR_CODE_INTERNAL_ERROR = 10;
    ERROR_CODE_SERVICE_UNAVAILABLE = 11;
    ERROR_CODE_INSUFFICIENT_STORAGE = 12;
  }

  ErrorCode code = 1;
  string message = 2;
  optional string details = 3;
}
