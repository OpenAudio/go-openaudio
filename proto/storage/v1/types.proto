syntax = "proto3";

package storage.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/OpenAudio/go-openaudio/pkg/api/storage/v1";

message PingRequest {}

message PingResponse {
  string message = 1;
}

message GetHealthRequest {}

message GetHealthResponse {}

message UploadFilesRequest {
  string signature = 1;
  string user_wallet = 2;
  string template = 3;
  string preview_start = 4;
  repeated string placement_hosts = 5;
  repeated File files = 6;
}

message File {
  string filename = 1;
  bytes data = 2;
}

message UploadFilesResponse {
  repeated Upload uploads = 1;
}

message GetUploadRequest {
  string id = 1;
  bool fix = 2;
  bool analyze = 3;
}

message GetUploadResponse {
  Upload upload = 1;
}

message StreamTrackRequest {
  StreamTrackSignature signature = 1;
  int64 chunk_size = 2;
}

message StreamTrackResponse {
  bytes data = 1;
}

message StreamTrackSignatureData {
  string track_id = 1;
  int64 timestamp = 2;
}

message StreamTrackSignature {
  // hex encoded signature of the data_hash
  string signature = 1;
  // sha256 hash of the data
  bytes data_hash = 2;
  StreamTrackSignatureData data = 3;
}

message Upload {
  string id = 1;
  string user_wallet = 2;
  string template = 3;
  string orig_filename = 4;
  string orig_file_cid = 5;
  string selected_preview = 6;
  FFProbeResult probe = 7;
  string error = 8;
  int32 error_count = 9;
  repeated string mirrors = 10;
  repeated string transcoded_mirrors = 11;
  string status = 12;
  repeated string placement_hosts = 13;
  string created_by = 14;
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp updated_at = 16;
  string transcoded_by = 17;
  double transcode_progress = 18;
  google.protobuf.Timestamp transcoded_at = 19;
  map<string, string> transcode_results = 20;
  string audio_analysis_status = 21;
  string audio_analysis_error = 22;
  int32 audio_analysis_error_count = 23;
  string audio_analyzed_by = 24;
  google.protobuf.Timestamp audio_analyzed_at = 25;
  AudioAnalysisResult audio_analysis_results = 26;
}

message FFProbeResult {
  message Format {
    string filename = 1;
    string format_name = 2;
    string format_long_name = 3;
    string duration = 4;
    string size = 5;
    string bit_rate = 6;
  }
  Format format = 1;
}

message AudioAnalysisResult {
  double bpm = 1;
  string key = 2;
}

message GetStreamURLRequest {
  string upload_id = 1;
  string cid = 2;
  int64 should_cache = 3;
  int64 track_id = 4;
  int64 user_id = 5;
}

message GetStreamURLResponse {
  repeated string urls = 1;
}

message GetIPDataRequest {
  string ip = 1;
}

message GetIPDataResponse {
  string country = 1;
  string country_code = 2;
  string city = 3;
  string region = 4;
  string region_code = 5;
  float latitude = 6;
  float longitude = 7;
}

message GetRendezvousNodesRequest {
  string cid = 1;
  int32 replication_factor = 2; // Optional, defaults to 3 if not specified
}

message GetRendezvousNodesResponse {
  repeated string nodes = 1; // List of node endpoints in rendezvous order
}

message GetStatusRequest {}

message GetStatusResponse {
  int64 storage_expectation = 1;
}
