package pages

import (
	"encoding/json"
	v1 "github.com/OpenAudio/go-openaudio/pkg/api/core/v1"
	v1beta1 "github.com/OpenAudio/go-openaudio/pkg/api/core/v1beta1"
	"github.com/dustin/go-humanize"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"time"
)

type TxView struct {
	Hash      string
	Block     string
	Timestamp time.Time
	Tx        []byte
}

func (p *Pages) toJSON(tx []byte) map[string]interface{} {
	empty := make(map[string]interface{})
	jsonData := []byte{}

	var transaction v1.SignedTransaction
	err := proto.Unmarshal(tx, &transaction)
	if err != nil {
		var transaction v1beta1.Transaction
		err := proto.Unmarshal(tx, &transaction)
		if err != nil {
			return empty
		}
		jsonData, err = protojson.Marshal(&transaction)
		if err != nil {
			return empty
		}
		return empty
	} else {
		jsonData, err = protojson.Marshal(&transaction)
		if err != nil {
			return empty
		}
	}

	var obj map[string]interface{}
	if err := json.Unmarshal(jsonData, &obj); err != nil {
		return empty
	}

	return obj
}

func (p *Pages) renderJSON(obj map[string]interface{}) string {
	jsonData, err := json.MarshalIndent(obj, "", "  ")
	if err != nil {
		// TODO: add log here
		return ""
	}
	return string(jsonData)
}

templ (p *Pages) TxPageHTML(view *TxView) {
	@p.layout.SiteFrame() {
		<div class="uk-card">
			<div class="uk-card-header">
				<h1 class="font-semibold leading-none tracking-tight">
					Transaction Details
				</h1>
			</div>
			<div class="uk-card-body space-y-2">
				<div>
					@p.components.Link("/tx/%s", view.Hash) {
						<div>Hash: { view.Hash }</div>
					}
				</div>
				<div>
					@p.components.Link("/block/%s", view.Block) {
						<div>Block: { view.Block }</div>
					}
				</div>
				<div>
					Age: { humanize.Time(view.Timestamp) }
				</div>
				<div class="text-small p-4 rounded-lg">
					<pre class="bg-gray-100 p-4 rounded-lg overflow-x-scroll">{ p.renderJSON(p.toJSON(view.Tx)) }</pre>
				</div>
			</div>
		</div>
	}
}
