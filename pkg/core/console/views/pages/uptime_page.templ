package pages

import (
	"fmt"
    "strings"
    "time"
)

type SlaStatus = int

const (
	SlaDead SlaStatus = iota
	SlaPartial
    SlaMet
    SlaExempt
)

type UptimePageView struct {
    ActiveEndpoint *Endpoint
    Endpoints []*Endpoint
    AvgBlockTimeMs   int
}

type Endpoint struct {
    EthAddress   string
    CometAddress string
	Endpoint     string
	Owner        string
    IsEthRegistered  bool
    RegisteredAt time.Time
    ActiveReport *SlaReport
    SlaReports   []*SlaReport
}

type SlaReport struct {
    SlaRollupId         int32
    Status              SlaStatus
	TxHash              string
	BlockStart          int64
	BlockEnd            int64
    BlocksProposed      int32
    Quota               int32
    ValidatorCount      int64
    PoSChallengesFailed int32
    PoSChallengesTotal  int32
	Time                time.Time
}

const (
    slaMeetsThreshold = 0.8
    slaMissThreshold = 0.4
    slaRed = "#f9344c"
    slaExempt = "#a9a9a9"
)

func meetsPoSSla(report *SlaReport) bool {
    faultRatio := 1.0
    if report.PoSChallengesTotal > 0 {
        faultRatio = 1.0 - (float64(report.PoSChallengesFailed) / float64(report.PoSChallengesTotal))
    }
    return faultRatio >= slaMeetsThreshold
}

func strippedEndpoint(endpoint string) string {
    res := strings.TrimPrefix(endpoint, "https://")
    res = strings.TrimPrefix(res, "http://")
    return res
}

func getSlaBarClassFromStatus(status SlaStatus) templ.CSSClass {
    switch status {
    case SlaDead:
        return slaBarDeadClass()
    case SlaPartial:
        return slaBarPartialClass()
    case SlaExempt:
        return slaBarExemptClass()
    case SlaMet:
        return slaBarMetClass()
    default:
        return templ.Class("")
    }
}


func getSlaClassFromStatus(status SlaStatus) templ.CSSClass {
    switch status {
    case SlaDead:
        return slaDeadClass()
    case SlaPartial:
        return slaPartialClass()
    case SlaExempt:
        return slaExemptClass()
    case SlaMet:
        return slaMetClass()
    default:
        return templ.Class("")
    }
}

func getPoSSlaClass(report *SlaReport) templ.CSSClass {
    if !meetsPoSSla(report) {
        return slaMissClass()
    } else {
        return templ.Class("")
    }
}


css slaBarMetClass() {
}

css slaBarPartialClass() {
}

css slaBarMissClass() {
    background-color: { templ.SafeCSSProperty(slaRed) };
}

css slaBarDeadClass() {
    background-color: { templ.SafeCSSProperty(slaRed) };
}

css slaBarExemptClass() {
    background-color: { templ.SafeCSSProperty(slaExempt) };
}

css slaMetClass() {
}

css slaPartialClass() {
}

css slaMissClass() {
    color: { templ.SafeCSSProperty(slaRed) };
}

css slaDeadClass() {
    color: { templ.SafeCSSProperty(slaRed) };
}

css slaExemptClass() {
    background-color: { templ.SafeCSSProperty(slaExempt) };
}


templ staticUptimeStyles() {
    <style type="text/css">
        .slaBar {
            width: 16px;
            height: 80px;
            display: inline-block;
            margin: 3px;
            border-radius: 0.5rem;
            background-color: #15d864;
        }

        .slaBarMini {
            width: 5px;
            height: 18px;
            display: inline-block;
            margin: 1px;
            border-radius: 0.5rem;
            vertical-align: middle;
            background-color: #15d864;
        }


        a.reportLink {
            display: block;
            width: 100%;
            height: 100%;
        }

        .activeSlaBar {
            border: #fff solid 1px;
        }

        table.validatorReports tr {
            border-bottom: #dedede solid 1px
        }

        table.validatorReports th {
            padding: 12px;
        }

        table.validatorReports td {
            padding: 12px;
        }

        .slaBarTooltip {
            visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 1;
        }

        li:hover .slaBarTooltip {
            visibility: visible;
        }

    </style>
}

templ (c *Pages) UptimePageHTML(props *UptimePageView) {
	@c.layout.SiteFrame() {
        @staticUptimeStyles()
        if props.ActiveEndpoint == nil {
            <h1 class="text-xl"> No SLA Rollup with requested block end. </h1>
        } else {
            <h2 class="text-lg text-gray-400">
                SLA Performance Dashboard
            </h2>
            <h1 class="text-4xl p-3">
                { strippedEndpoint(props.ActiveEndpoint.Endpoint) }
            </h1>
            <h3 class="text-sm text-gray-400 px-3">
                <span class="text-gray-300">Owned by </span><a href={ templ.URL(fmt.Sprintf("/console/adjudicate/%s", props.ActiveEndpoint.Owner)) }>{ props.ActiveEndpoint.Owner }</a>
            </h3>

            <ul class="m-2">
                for _, r := range props.ActiveEndpoint.SlaReports {
                    <li class={ "slaBar", templ.KV("activeSlaBar", props.ActiveEndpoint.ActiveReport.BlockEnd == r.BlockEnd), getSlaBarClassFromStatus(r.Status) }>
                        <a class="reportLink" href={ templ.URL(fmt.Sprintf("/console/uptime/%d/%s", r.BlockEnd, strippedEndpoint(props.ActiveEndpoint.Endpoint))) }></a>
                        <span class="slaBarTooltip">{ r.Time.Format("06-01-02 15:04:05 MST") }</span>
                    </li>
                }
            </ul>

            <h2 class="text-lg px-3">
                <a href={ templ.URL(fmt.Sprintf("/console/tx/%s", props.ActiveEndpoint.ActiveReport.TxHash)) }>{ fmt.Sprintf("SLA Report at End Block %d", props.ActiveEndpoint.ActiveReport.BlockEnd) }</a>
            </h2>

            <div class="flex flex-row text-center p-2">
                <div class="basis-1/4 rounded-md bg-secondary py-8 mx-1">
                    <dt class="text-lg">
                        { props.ActiveEndpoint.ActiveReport.Time.Format("06-01-02") }
                        <br />
                        { props.ActiveEndpoint.ActiveReport.Time.Format("15:04:05 MST") }
                    </dt>
                    <dd class="text-sm">Date Finalized</dd>
                </div>

                <div class="basis-1/4 rounded-md bg-secondary py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.BlockStart) }</dt>
                    <dd class="text-sm">Start Block</dd>
                </div>

                <div class="basis-1/4 rounded-md bg-secondary py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.BlockEnd) }</dt>
                    <dd class="text-sm">End Block</dd>
                </div>

                <div class="basis-1/4 rounded-md bg-secondary py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%.1fs", float64(props.AvgBlockTimeMs)/1000.0) }</dt>
                    <dd class="text-sm">Avg Block Time</dd>
                </div>
            </div>

            <div class="flex flex-row text-center p-2">
                <div class="basis-1/4 rounded-md bg-secondary py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.Quota) }</dt>
                    <dd class="text-sm">Block Quota</dd>
                </div>

                <div class={ "basis-1/4 rounded-md bg-secondary py-8 mx-1", getSlaClassFromStatus(props.ActiveEndpoint.ActiveReport.Status) }>
                    if props.ActiveEndpoint.ActiveReport.Status == SlaExempt {
                        <dt class="text-4xl">N/A</dt>
                    } else {
                        <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.BlocksProposed) }</dt>
                    }
                    <dd class="text-sm">Blocks Proposed</dd>
                </div>

                <div class="basis-1/4 rounded-md bg-secondary py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.PoSChallengesTotal) }</dt>
                    <dd class="text-sm">Challenges Received</dd>
                </div>

                <div class={ "basis-1/4 rounded-md bg-secondary py-8 mx-1", templ.KV(slaMissClass(), props.ActiveEndpoint.IsEthRegistered && !meetsPoSSla(props.ActiveEndpoint.ActiveReport)) }>
                    <a href={ 
                        templ.URL(
                            fmt.Sprintf(
                                "/console/pos/%s?block_start=%d&block_end=%d",
                                props.ActiveEndpoint.CometAddress,
                                props.ActiveEndpoint.ActiveReport.BlockStart,
                                props.ActiveEndpoint.ActiveReport.BlockEnd,
                            ),
                        ) 
                    }>
                        if !props.ActiveEndpoint.IsEthRegistered {
                            <dt class="text-4xl">N/A</dt>
                        } else {
                            <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.PoSChallengesFailed) }</dt>
                        }
                        <dd class="text-sm">Challenges Failed</dd>
                    </a>
                </div>
            </div>

            <table class="bg-tertiary p-2 rounded validatorReports text-left m-4">
                <colgroup>
                    <col />
                    <col class="bg-primary" />
                    <col />
                    <col class="bg-primary" />
                    <col />
                </colgroup>
                <tbody class="divide-gray-800">
                    <tr>
                        <th>Validator</th>
                        <th>Blocks Proposed</th>
                        <th colspan="2" class="text-center">
                            Proof of Storage Challenges
                            <div class="flex flex-row text-left">
                                <div class="basis-1/2">Received</div>
                                <div class="basis-1/2">Failed</div>
                            </div>
                        </th>
                        <th>History</th>
                    </tr>
                    for _, ep := range props.Endpoints {
                        @validatorRowReport(ep)
                    }
                </tbody>
            </table>
        }
	}
}

templ validatorRowReport(ep *Endpoint) {
    <tr>
        <td class={ getSlaClassFromStatus(ep.ActiveReport.Status) }>
            <a href={ templ.URL(fmt.Sprintf("/console/uptime/%d/%s", ep.ActiveReport.BlockEnd, strippedEndpoint(ep.Endpoint))) }>
                { strippedEndpoint(ep.Endpoint) }
            </a>
        </td>
        <td class={ getSlaClassFromStatus(ep.ActiveReport.Status) }>
            { fmt.Sprintf("%d", ep.ActiveReport.BlocksProposed) }
        </td>

        <td>{ fmt.Sprintf("%d", ep.ActiveReport.PoSChallengesTotal) }</td>
        <td class={ getPoSSlaClass(ep.ActiveReport) }>
            { fmt.Sprintf("%d", ep.ActiveReport.PoSChallengesFailed) }
        </td>
        <td>
            for i := max(0, len(ep.SlaReports) - 6); i < len(ep.SlaReports); i++ {
                @validatorMiniHistory(ep.SlaReports[i], ep.Endpoint)
            }
        </td>
    </tr>
}

templ validatorMiniHistory(report *SlaReport, endpoint string) {
    <li class={ "slaBarMini", getSlaBarClassFromStatus(report.Status) }>
        <a class="reportLink" href={ templ.URL(fmt.Sprintf("/console/uptime/%d/%s", report.BlockEnd, strippedEndpoint(endpoint))) }></a>
    </li>
}
