// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func (p *Pages) UploadPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<section class=\"max-w-6xl mx-auto mt-12 px-4\" x-data=\"uploadForm\" x-init=\"init()\"><div class=\"grid grid-cols-1 lg:grid-cols-2 gap-10\"><!-- Left: Artwork + Audio Drop Zones --><div class=\"space-y-6 text-center\" x-on:dragover.prevent=\"dragging = true\" x-on:dragleave.prevent=\"dragging = false\" x-on:drop=\"dropFile\"><!-- Artwork --><div class=\"rounded-xl border border-dashed p-4 cursor-pointer transition-all aspect-square flex items-center justify-center bg-gray-50 overflow-hidden\" x-bind:class=\"{ 'border-purple-500 bg-purple-100': dragging }\" x-on:click=\"$refs.artworkInput.click()\"><input type=\"file\" accept=\"image/*\" name=\"artwork\" x-ref=\"artworkInput\" class=\"hidden\" x-on:change=\"selectArtwork\"><template x-if=\"!artURL\"><p class=\"text-gray-500\">Click or Drop Artwork</p></template><template x-if=\"artURL\"><img :src=\"artURL\" alt=\"Artwork preview\" class=\"object-cover w-full h-full rounded-xl\"></template></div><!-- Audio --><div class=\"border-2 border-dashed rounded-xl p-4 cursor-pointer transition-all\" x-bind:class=\"{ 'border-purple-500 bg-purple-50': dragging }\" x-on:click=\"$refs.fileInput.click()\"><input type=\"file\" accept=\"audio/*\" name=\"files\" x-ref=\"fileInput\" class=\"hidden\" x-on:change=\"selectFile\"><template x-if=\"!file\"><div><p class=\"font-semibold\">Click or Drop Audio File</p><p class=\"text-sm text-gray-500 mt-1\">MP3, WAV, etc.</p></div></template><template x-if=\"file\"><div class=\"mt-2\"><p class=\"font-medium\">Selected: <span x-text=\"file.name\"></span></p><audio class=\"mt-3 w-full\" x-bind:src=\"audioURL\" controls></audio></div></template></div></div><!-- Right: Metadata Form --><form id=\"upload-form\" class=\"space-y-5\" x-on:submit.prevent=\"signAndUpload($event)\"><h2 class=\"text-2xl font-bold mb-4\">Track Info</h2><!-- Title --><div><label class=\"block text-sm font-medium mb-1\" for=\"title\">Track Title</label> <input type=\"text\" name=\"title\" id=\"title\" required class=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-white text-black focus:ring-2 focus:ring-purple-500\"></div><!-- Artist Wallet --><div><label class=\"block text-sm font-medium mb-1\">Artist Wallet</label><div class=\"flex items-center gap-2\"><input type=\"text\" name=\"artist\" :value=\"ethAddress\" readonly required class=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-100 text-black focus:outline-none\"><template x-if=\"ethAddress\"><button type=\"button\" class=\"fr-btn px-3 py-1 text-sm\" @click=\"connectWallet\">Switch Wallet</button></template></div><template x-if=\"!ethAddress\"><button type=\"button\" class=\"fr-btn mt-2\" @click=\"connectWallet\">Connect Wallet</button></template></div><!-- Genre --><div><label class=\"block text-sm font-medium mb-1\" for=\"genre\">Genre</label> <select name=\"genre\" id=\"genre\" required class=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-white text-black focus:ring-2 focus:ring-purple-500\"><option value=\"\">Select Genre</option> <option>All Genres</option> <option>Electronic</option> <option>Rock</option> <option>Metal</option> <option>Alternative</option> <option>Hip-Hop/Rap</option> <option>Experimental</option> <option>Punk</option> <option>Folk</option> <option>Pop</option> <option>Ambient</option> <option>Soundtrack</option> <option>World</option> <option>Jazz</option> <option>Acoustic</option> <option>Funk</option> <option>R&B/Soul</option> <option>Devotional</option> <option>Classical</option> <option>Reggae</option> <option>Podcasts</option> <option>Country</option> <option>Spoken Word</option> <option>Comedy</option> <option>Blues</option> <option>Kids</option> <option>Audiobooks</option> <option>Latin</option> <option>Lo-Fi</option> <option>Hyperpop</option> <option>Dancehall</option> <optgroup label=\"Electronic Subgenres\"><option>Techno</option> <option>Trap</option> <option>House</option> <option>Tech House</option> <option>Deep House</option> <option>Disco</option> <option>Electro</option> <option>Jungle</option> <option>Progressive House</option> <option>Hardstyle</option> <option>Glitch Hop</option> <option>Trance</option> <option>Future Bass</option> <option>Future House</option> <option>Tropical House</option> <option>Downtempo</option> <option>Drum & Bass</option> <option>Dubstep</option> <option>Jersey Club</option> <option>Vaporwave</option> <option>Moombahton</option></optgroup></select></div><!-- Mood --><div><label class=\"block text-sm font-medium mb-1\" for=\"mood\">Mood</label> <select name=\"mood\" id=\"mood\" class=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-white text-black focus:ring-2 focus:ring-purple-500\"><option value=\"\">Select Mood</option> <option>Peaceful</option> <option>Romantic</option> <option>Sentimental</option> <option>Tender</option> <option>Easygoing</option> <option>Yearning</option> <option>Sophisticated</option> <option>Sensual</option> <option>Cool</option> <option>Gritty</option> <option>Melancholy</option> <option>Serious</option> <option>Brooding</option> <option>Fiery</option> <option>Defiant</option> <option>Aggressive</option> <option>Rowdy</option> <option>Excited</option> <option>Energizing</option> <option>Empowering</option> <option>Stirring</option> <option>Upbeat</option> <option>Other</option></select></div><!-- Tags --><div><label class=\"block text-sm font-medium mb-1\" for=\"tags\">Tags</label> <input type=\"text\" x-model=\"tagInput\" @blur=\"addTagsFromInput\" @keydown.enter.prevent=\"addTagsFromInput\" placeholder=\"e.g. vaporwave, chill\" class=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-white text-black focus:ring-2 focus:ring-purple-500\"><div class=\"flex flex-wrap gap-2 mt-2\"><template x-for=\"(tag, index) in tags\" :key=\"index\"><span class=\"inline-flex items-center bg-purple-100 text-purple-800 text-sm px-2 py-1 rounded-full\"><span x-text=\"tag\"></span> <button type=\"button\" class=\"ml-1 text-purple-500 hover:text-red-500\" @click=\"removeTag(tag)\">×</button></span></template></div></div><!-- Description --><div><label class=\"block text-sm font-medium mb-1\" for=\"description\">Description</label> <textarea x-model=\"description\" name=\"description\" id=\"description\" rows=\"4\" class=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-white text-black focus:ring-2 focus:ring-purple-500\"></textarea></div></form></div><!-- Upload Button --><div class=\"mt-10 text-center\"><button type=\"submit\" form=\"upload-form\" class=\"fr-btn px-6 py-3 text-lg font-semibold\" x-bind:disabled=\"uploading\"><span x-show=\"!uploading\">Upload</span> <span x-show=\"uploading\">Uploading...</span></button><div class=\"mt-4\" x-show=\"success\"><div class=\"fr-alert fr-alert-success\">Upload successful!</div></div><div class=\"mt-4\" x-show=\"error\"><div class=\"fr-alert fr-alert-error\" x-text=\"error\"></div></div></div></section><script>\n\t\tconst uploadForm = {\n\t\t\tuploading: false,\n\t\t\tsuccess: false,\n\t\t\terror: '',\n\t\t\tfile: null,\n\t\t\tartwork: null,\n\t\t\taudioURL: '',\n\t\t\tartURL: '',\n\t\t\ttagInput: '',\n\t\t\ttags: [],\n\t\t\tdescription: '',\n\t\t\tethAddress: '',\n\t\t\tsignature: '',\n\t\t\tdragging: false,\n\n\t\t\tasync init() {\n\t\t\t\tif (window.ethereum && window.ethereum.selectedAddress) {\n\t\t\t\t\tthis.ethAddress = window.ethereum.selectedAddress;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync connectWallet() {\n\t\t\t\tif (!window.ethereum) {\n\t\t\t\t\tthis.error = \"MetaMask is not installed.\";\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\tmethod: 'wallet_requestPermissions',\n\t\t\t\t\t\tparams: [{ eth_accounts: {} }],\n\t\t\t\t\t});\n\t\t\t\t\tconst accounts = await window.ethereum.request({ method: 'eth_accounts' });\n\t\t\t\t\tthis.ethAddress = accounts[0];\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(\"Wallet connection error:\", err);\n\t\t\t\t\tthis.error = \"Wallet access denied.\";\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tselectFile(e) {\n\t\t\t\tthis.file = e.target.files[0];\n\t\t\t\tthis.audioURL = URL.createObjectURL(this.file);\n\t\t\t},\n\t\t\tdropFile(e) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.file = e.dataTransfer.files[0];\n\t\t\t\tthis.audioURL = URL.createObjectURL(this.file);\n\t\t\t\tthis.dragging = false;\n\t\t\t},\n\t\t\tselectArtwork(e) {\n\t\t\t\tthis.artwork = e.target.files[0];\n\t\t\t\tthis.artURL = URL.createObjectURL(this.artwork);\n\t\t\t},\n\t\t\taddTagsFromInput() {\n\t\t\t\tif (this.tagInput.trim() !== '') {\n\t\t\t\t\tthis.tagInput.split(',').forEach(t => {\n\t\t\t\t\t\tconst tag = t.trim();\n\t\t\t\t\t\tif (tag && !this.tags.includes(tag)) {\n\t\t\t\t\t\t\tthis.tags.push(tag);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.tagInput = '';\n\t\t\t\t}\n\t\t\t},\n\t\t\tremoveTag(tag) {\n\t\t\t\tthis.tags = this.tags.filter(t => t !== tag);\n\t\t\t},\n\t\t\treset() {\n\t\t\t\tthis.file = null;\n\t\t\t\tthis.artwork = null;\n\t\t\t\tthis.audioURL = '';\n\t\t\t\tthis.artURL = '';\n\t\t\t\tthis.tags = [];\n\t\t\t\tthis.tagInput = '';\n\t\t\t\tthis.description = '';\n\t\t\t\tthis.signature = '';\n\t\t\t\tthis.$refs.fileInput.value = '';\n\t\t\t\tthis.$refs.artworkInput.value = '';\n\t\t\t},\n\n\t\t\tasync signAndUpload(e) {\n\t\t\t\tif (!this.file) {\n\t\t\t\t\tthis.error = 'Please select an audio file.';\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!this.ethAddress) {\n\t\t\t\t\tawait this.connectWallet();\n\t\t\t\t\tif (!this.ethAddress) {\n\t\t\t\t\t\tthis.error = 'Wallet connection required.';\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.uploading = true;\n\t\t\t\tthis.error = '';\n\t\t\t\tthis.success = false;\n\n\t\t\t\tconst metadata = {\n\t\t\t\t\ttitle: e.target.title.value,\n\t\t\t\t\tartist: this.ethAddress,\n\t\t\t\t\tgenre: e.target.genre.value,\n\t\t\t\t\tmood: e.target.mood.value,\n\t\t\t\t\ttags: this.tags,\n\t\t\t\t\tdescription: this.description,\n\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t};\n\n\t\t\t\tconst payload = JSON.stringify(metadata);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst signature = await ethereum.request({\n\t\t\t\t\t\tmethod: 'personal_sign',\n\t\t\t\t\t\tparams: [payload, this.ethAddress],\n\t\t\t\t\t});\n\t\t\t\t\tthis.signature = signature;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(\"Signature failed:\", err);\n\t\t\t\t\tthis.error = 'Signature rejected.';\n\t\t\t\t\tthis.uploading = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// 1️⃣ Upload artwork first\n\t\t\t\tif (this.artwork) {\n\t\t\t\t\tconst artForm = new FormData();\n\t\t\t\t\tartForm.append('files', this.artwork);\n\t\t\t\t\tartForm.append('template', 'img_square');\n\t\t\t\t\tconst artURL = `/uploads?signature=${encodeURIComponent(this.signature)}`;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst res = await fetch(artURL, {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'X-User-Wallet-Addr': this.ethAddress,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: artForm,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst artRes = await res.json();\n\t\t\t\t\t\tconsole.log(\"Artwork upload response:\", artRes);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error(\"Artwork upload error:\", err);\n\t\t\t\t\t\tthis.error = 'Artwork upload failed.';\n\t\t\t\t\t\tthis.uploading = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 2️⃣ Upload audio with metadata\n\t\t\t\tconst formData = new FormData(e.target);\n\t\t\t\tformData.append('files', this.file);\n\t\t\t\tformData.append('template', 'audio');\n\t\t\t\tformData.append('tags', this.tags.join(','));\n\t\t\t\tformData.append('description', this.description);\n\t\t\t\tformData.append('address', this.ethAddress);\n\t\t\t\tformData.append('signed_payload', payload);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await fetch(`/uploads?signature=${encodeURIComponent(this.signature)}`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'X-User-Wallet-Addr': this.ethAddress,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: formData,\n\t\t\t\t\t});\n\t\t\t\t\tif (!res.ok) throw new Error('Upload failed');\n\t\t\t\t\tconst trackRes = await res.json();\n\t\t\t\t\tconsole.log(\"Audio upload response:\", trackRes);\n\t\t\t\t\tthis.success = true;\n\t\t\t\t\tthis.reset();\n\t\t\t\t\te.target.reset();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(\"Audio upload error:\", err);\n\t\t\t\t\tthis.error = err.message;\n\t\t\t\t} finally {\n\t\t\t\t\tthis.uploading = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = p.layout.SiteFrame().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
