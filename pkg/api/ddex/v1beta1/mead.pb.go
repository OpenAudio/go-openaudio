// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ddex/v1beta1/mead.proto

package v1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Media Enrichment and Description (MEAD) message from the DDEX standard
type MeadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageHeader           *MessageHeader                       `protobuf:"bytes,1,opt,name=message_header,json=messageHeader,proto3" json:"message_header,omitempty"`
	ResourceInformationList *MeadMessage_ResourceInformationList `protobuf:"bytes,2,opt,name=resource_information_list,json=resourceInformationList,proto3" json:"resource_information_list,omitempty"`
	ReleaseInformationList  *MeadMessage_ReleaseInformationList  `protobuf:"bytes,3,opt,name=release_information_list,json=releaseInformationList,proto3" json:"release_information_list,omitempty"`
}

func (x *MeadMessage) Reset() {
	*x = MeadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage) ProtoMessage() {}

func (x *MeadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage.ProtoReflect.Descriptor instead.
func (*MeadMessage) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0}
}

func (x *MeadMessage) GetMessageHeader() *MessageHeader {
	if x != nil {
		return x.MessageHeader
	}
	return nil
}

func (x *MeadMessage) GetResourceInformationList() *MeadMessage_ResourceInformationList {
	if x != nil {
		return x.ResourceInformationList
	}
	return nil
}

func (x *MeadMessage) GetReleaseInformationList() *MeadMessage_ReleaseInformationList {
	if x != nil {
		return x.ReleaseInformationList
	}
	return nil
}

type MeadMessageAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address of the MEAD message
	MeadAddress string `protobuf:"bytes,1,opt,name=mead_address,json=meadAddress,proto3" json:"mead_address,omitempty"`
}

func (x *MeadMessageAck) Reset() {
	*x = MeadMessageAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessageAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessageAck) ProtoMessage() {}

func (x *MeadMessageAck) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessageAck.ProtoReflect.Descriptor instead.
func (*MeadMessageAck) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{1}
}

func (x *MeadMessageAck) GetMeadAddress() string {
	if x != nil {
		return x.MeadAddress
	}
	return ""
}

type MeadMessage_ResourceInformationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceInformation []*MeadMessage_ResourceInformation `protobuf:"bytes,1,rep,name=resource_information,json=resourceInformation,proto3" json:"resource_information,omitempty"`
}

func (x *MeadMessage_ResourceInformationList) Reset() {
	*x = MeadMessage_ResourceInformationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_ResourceInformationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_ResourceInformationList) ProtoMessage() {}

func (x *MeadMessage_ResourceInformationList) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_ResourceInformationList.ProtoReflect.Descriptor instead.
func (*MeadMessage_ResourceInformationList) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MeadMessage_ResourceInformationList) GetResourceInformation() []*MeadMessage_ResourceInformation {
	if x != nil {
		return x.ResourceInformation
	}
	return nil
}

type MeadMessage_ResourceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceSummary     *MeadMessage_ResourceSummary       `protobuf:"bytes,1,opt,name=resource_summary,json=resourceSummary,proto3" json:"resource_summary,omitempty"`
	ResourceContributor []*MeadMessage_ResourceContributor `protobuf:"bytes,2,rep,name=resource_contributor,json=resourceContributor,proto3" json:"resource_contributor,omitempty"`
}

func (x *MeadMessage_ResourceInformation) Reset() {
	*x = MeadMessage_ResourceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_ResourceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_ResourceInformation) ProtoMessage() {}

func (x *MeadMessage_ResourceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_ResourceInformation.ProtoReflect.Descriptor instead.
func (*MeadMessage_ResourceInformation) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MeadMessage_ResourceInformation) GetResourceSummary() *MeadMessage_ResourceSummary {
	if x != nil {
		return x.ResourceSummary
	}
	return nil
}

func (x *MeadMessage_ResourceInformation) GetResourceContributor() []*MeadMessage_ResourceContributor {
	if x != nil {
		return x.ResourceContributor
	}
	return nil
}

type MeadMessage_ResourceSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId    *Resource_ResourceId    `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	DisplayTitle  *Resource_DisplayTitle  `protobuf:"bytes,2,opt,name=display_title,json=displayTitle,proto3" json:"display_title,omitempty"`
	DisplayArtist *Resource_DisplayArtist `protobuf:"bytes,3,opt,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty"`
	// optional information fields
	Mood           *MeadMessage_Mood           `protobuf:"bytes,4,opt,name=mood,proto3,oneof" json:"mood,omitempty"`
	BeatsPerMinute *MeadMessage_BeatsPerMinute `protobuf:"bytes,5,opt,name=beats_per_minute,json=beatsPerMinute,proto3,oneof" json:"beats_per_minute,omitempty"`
	Harmony        *MeadMessage_Harmony        `protobuf:"bytes,6,opt,name=harmony,proto3,oneof" json:"harmony,omitempty"`
}

func (x *MeadMessage_ResourceSummary) Reset() {
	*x = MeadMessage_ResourceSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_ResourceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_ResourceSummary) ProtoMessage() {}

func (x *MeadMessage_ResourceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_ResourceSummary.ProtoReflect.Descriptor instead.
func (*MeadMessage_ResourceSummary) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MeadMessage_ResourceSummary) GetResourceId() *Resource_ResourceId {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *MeadMessage_ResourceSummary) GetDisplayTitle() *Resource_DisplayTitle {
	if x != nil {
		return x.DisplayTitle
	}
	return nil
}

func (x *MeadMessage_ResourceSummary) GetDisplayArtist() *Resource_DisplayArtist {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

func (x *MeadMessage_ResourceSummary) GetMood() *MeadMessage_Mood {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *MeadMessage_ResourceSummary) GetBeatsPerMinute() *MeadMessage_BeatsPerMinute {
	if x != nil {
		return x.BeatsPerMinute
	}
	return nil
}

func (x *MeadMessage_ResourceSummary) GetHarmony() *MeadMessage_Harmony {
	if x != nil {
		return x.Harmony
	}
	return nil
}

type MeadMessage_ResourceContributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId   *Party_PartyId   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyName *Party_PartyName `protobuf:"bytes,2,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
}

func (x *MeadMessage_ResourceContributor) Reset() {
	*x = MeadMessage_ResourceContributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_ResourceContributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_ResourceContributor) ProtoMessage() {}

func (x *MeadMessage_ResourceContributor) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_ResourceContributor.ProtoReflect.Descriptor instead.
func (*MeadMessage_ResourceContributor) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MeadMessage_ResourceContributor) GetPartyId() *Party_PartyId {
	if x != nil {
		return x.PartyId
	}
	return nil
}

func (x *MeadMessage_ResourceContributor) GetPartyName() *Party_PartyName {
	if x != nil {
		return x.PartyName
	}
	return nil
}

type MeadMessage_ReleaseSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId     *Release_ReleaseId     `protobuf:"bytes,1,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	DisplayTitle  *Release_DisplayTitle  `protobuf:"bytes,2,opt,name=display_title,json=displayTitle,proto3" json:"display_title,omitempty"`
	DisplayArtist *Release_DisplayArtist `protobuf:"bytes,3,opt,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty"`
}

func (x *MeadMessage_ReleaseSummary) Reset() {
	*x = MeadMessage_ReleaseSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_ReleaseSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_ReleaseSummary) ProtoMessage() {}

func (x *MeadMessage_ReleaseSummary) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_ReleaseSummary.ProtoReflect.Descriptor instead.
func (*MeadMessage_ReleaseSummary) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MeadMessage_ReleaseSummary) GetReleaseId() *Release_ReleaseId {
	if x != nil {
		return x.ReleaseId
	}
	return nil
}

func (x *MeadMessage_ReleaseSummary) GetDisplayTitle() *Release_DisplayTitle {
	if x != nil {
		return x.DisplayTitle
	}
	return nil
}

func (x *MeadMessage_ReleaseSummary) GetDisplayArtist() *Release_DisplayArtist {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

type MeadMessage_ReleaseInformationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseInformation []*MeadMessage_ReleaseInformation `protobuf:"bytes,1,rep,name=release_information,json=releaseInformation,proto3" json:"release_information,omitempty"`
}

func (x *MeadMessage_ReleaseInformationList) Reset() {
	*x = MeadMessage_ReleaseInformationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_ReleaseInformationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_ReleaseInformationList) ProtoMessage() {}

func (x *MeadMessage_ReleaseInformationList) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_ReleaseInformationList.ProtoReflect.Descriptor instead.
func (*MeadMessage_ReleaseInformationList) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MeadMessage_ReleaseInformationList) GetReleaseInformation() []*MeadMessage_ReleaseInformation {
	if x != nil {
		return x.ReleaseInformation
	}
	return nil
}

type MeadMessage_ReleaseInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseSummary *MeadMessage_ReleaseSummary `protobuf:"bytes,1,opt,name=release_summary,json=releaseSummary,proto3" json:"release_summary,omitempty"`
	// optional information fields
	Mood           *MeadMessage_Mood           `protobuf:"bytes,2,opt,name=mood,proto3,oneof" json:"mood,omitempty"`
	BeatsPerMinute *MeadMessage_BeatsPerMinute `protobuf:"bytes,3,opt,name=beats_per_minute,json=beatsPerMinute,proto3,oneof" json:"beats_per_minute,omitempty"`
	Harmony        *MeadMessage_Harmony        `protobuf:"bytes,4,opt,name=harmony,proto3,oneof" json:"harmony,omitempty"`
}

func (x *MeadMessage_ReleaseInformation) Reset() {
	*x = MeadMessage_ReleaseInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_ReleaseInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_ReleaseInformation) ProtoMessage() {}

func (x *MeadMessage_ReleaseInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_ReleaseInformation.ProtoReflect.Descriptor instead.
func (*MeadMessage_ReleaseInformation) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 6}
}

func (x *MeadMessage_ReleaseInformation) GetReleaseSummary() *MeadMessage_ReleaseSummary {
	if x != nil {
		return x.ReleaseSummary
	}
	return nil
}

func (x *MeadMessage_ReleaseInformation) GetMood() *MeadMessage_Mood {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *MeadMessage_ReleaseInformation) GetBeatsPerMinute() *MeadMessage_BeatsPerMinute {
	if x != nil {
		return x.BeatsPerMinute
	}
	return nil
}

func (x *MeadMessage_ReleaseInformation) GetHarmony() *MeadMessage_Harmony {
	if x != nil {
		return x.Harmony
	}
	return nil
}

type MeadMessage_Mood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MeadMessage_Mood) Reset() {
	*x = MeadMessage_Mood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_Mood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_Mood) ProtoMessage() {}

func (x *MeadMessage_Mood) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_Mood.ProtoReflect.Descriptor instead.
func (*MeadMessage_Mood) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 7}
}

func (x *MeadMessage_Mood) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MeadMessage_Mood) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MeadMessage_BeatsPerMinute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MeadMessage_BeatsPerMinute) Reset() {
	*x = MeadMessage_BeatsPerMinute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_BeatsPerMinute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_BeatsPerMinute) ProtoMessage() {}

func (x *MeadMessage_BeatsPerMinute) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_BeatsPerMinute.ProtoReflect.Descriptor instead.
func (*MeadMessage_BeatsPerMinute) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 8}
}

func (x *MeadMessage_BeatsPerMinute) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MeadMessage_Harmony struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootChordNote    string `protobuf:"bytes,1,opt,name=root_chord_note,json=rootChordNote,proto3" json:"root_chord_note,omitempty"`
	RootChordQuality string `protobuf:"bytes,2,opt,name=root_chord_quality,json=rootChordQuality,proto3" json:"root_chord_quality,omitempty"`
	Mode             string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *MeadMessage_Harmony) Reset() {
	*x = MeadMessage_Harmony{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_mead_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeadMessage_Harmony) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage_Harmony) ProtoMessage() {}

func (x *MeadMessage_Harmony) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_mead_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage_Harmony.ProtoReflect.Descriptor instead.
func (*MeadMessage_Harmony) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_mead_proto_rawDescGZIP(), []int{0, 9}
}

func (x *MeadMessage_Harmony) GetRootChordNote() string {
	if x != nil {
		return x.RootChordNote
	}
	return ""
}

func (x *MeadMessage_Harmony) GetRootChordQuality() string {
	if x != nil {
		return x.RootChordQuality
	}
	return ""
}

func (x *MeadMessage_Harmony) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

var File_ddex_v1beta1_mead_proto protoreflect.FileDescriptor

var file_ddex_v1beta1_mead_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d,
	0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x19, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x64, 0x64,
	0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x11, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x19, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x16, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x7b, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x60, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xcd, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x60, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x1a, 0xea, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x10, 0x62, 0x65, 0x61,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x48, 0x01, 0x52,
	0x0e, 0x62, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48,
	0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x07, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x1a, 0x8b,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xe5, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x1a, 0x77, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d,
	0x0a, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe5, 0x02,
	0x0a, 0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x10, 0x62, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x62, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x68, 0x61, 0x72,
	0x6d, 0x6f, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x48, 0x02, 0x52,
	0x07, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6d, 0x6f, 0x6f, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x1a, 0x3c, 0x0a, 0x04, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x0a, 0x0e, 0x42, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x73, 0x0a, 0x07, 0x48,
	0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63,
	0x68, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f, 0x6f, 0x74,
	0x43, 0x68, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x33, 0x0a, 0x0e, 0x4d, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x67, 0x6f,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ddex_v1beta1_mead_proto_rawDescOnce sync.Once
	file_ddex_v1beta1_mead_proto_rawDescData = file_ddex_v1beta1_mead_proto_rawDesc
)

func file_ddex_v1beta1_mead_proto_rawDescGZIP() []byte {
	file_ddex_v1beta1_mead_proto_rawDescOnce.Do(func() {
		file_ddex_v1beta1_mead_proto_rawDescData = protoimpl.X.CompressGZIP(file_ddex_v1beta1_mead_proto_rawDescData)
	})
	return file_ddex_v1beta1_mead_proto_rawDescData
}

var file_ddex_v1beta1_mead_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ddex_v1beta1_mead_proto_goTypes = []interface{}{
	(*MeadMessage)(nil),                         // 0: ddex.v1beta1.MeadMessage
	(*MeadMessageAck)(nil),                      // 1: ddex.v1beta1.MeadMessageAck
	(*MeadMessage_ResourceInformationList)(nil), // 2: ddex.v1beta1.MeadMessage.ResourceInformationList
	(*MeadMessage_ResourceInformation)(nil),     // 3: ddex.v1beta1.MeadMessage.ResourceInformation
	(*MeadMessage_ResourceSummary)(nil),         // 4: ddex.v1beta1.MeadMessage.ResourceSummary
	(*MeadMessage_ResourceContributor)(nil),     // 5: ddex.v1beta1.MeadMessage.ResourceContributor
	(*MeadMessage_ReleaseSummary)(nil),          // 6: ddex.v1beta1.MeadMessage.ReleaseSummary
	(*MeadMessage_ReleaseInformationList)(nil),  // 7: ddex.v1beta1.MeadMessage.ReleaseInformationList
	(*MeadMessage_ReleaseInformation)(nil),      // 8: ddex.v1beta1.MeadMessage.ReleaseInformation
	(*MeadMessage_Mood)(nil),                    // 9: ddex.v1beta1.MeadMessage.Mood
	(*MeadMessage_BeatsPerMinute)(nil),          // 10: ddex.v1beta1.MeadMessage.BeatsPerMinute
	(*MeadMessage_Harmony)(nil),                 // 11: ddex.v1beta1.MeadMessage.Harmony
	(*MessageHeader)(nil),                       // 12: ddex.v1beta1.MessageHeader
	(*Resource_ResourceId)(nil),                 // 13: ddex.v1beta1.Resource.ResourceId
	(*Resource_DisplayTitle)(nil),               // 14: ddex.v1beta1.Resource.DisplayTitle
	(*Resource_DisplayArtist)(nil),              // 15: ddex.v1beta1.Resource.DisplayArtist
	(*Party_PartyId)(nil),                       // 16: ddex.v1beta1.Party.PartyId
	(*Party_PartyName)(nil),                     // 17: ddex.v1beta1.Party.PartyName
	(*Release_ReleaseId)(nil),                   // 18: ddex.v1beta1.Release.ReleaseId
	(*Release_DisplayTitle)(nil),                // 19: ddex.v1beta1.Release.DisplayTitle
	(*Release_DisplayArtist)(nil),               // 20: ddex.v1beta1.Release.DisplayArtist
}
var file_ddex_v1beta1_mead_proto_depIdxs = []int32{
	12, // 0: ddex.v1beta1.MeadMessage.message_header:type_name -> ddex.v1beta1.MessageHeader
	2,  // 1: ddex.v1beta1.MeadMessage.resource_information_list:type_name -> ddex.v1beta1.MeadMessage.ResourceInformationList
	7,  // 2: ddex.v1beta1.MeadMessage.release_information_list:type_name -> ddex.v1beta1.MeadMessage.ReleaseInformationList
	3,  // 3: ddex.v1beta1.MeadMessage.ResourceInformationList.resource_information:type_name -> ddex.v1beta1.MeadMessage.ResourceInformation
	4,  // 4: ddex.v1beta1.MeadMessage.ResourceInformation.resource_summary:type_name -> ddex.v1beta1.MeadMessage.ResourceSummary
	5,  // 5: ddex.v1beta1.MeadMessage.ResourceInformation.resource_contributor:type_name -> ddex.v1beta1.MeadMessage.ResourceContributor
	13, // 6: ddex.v1beta1.MeadMessage.ResourceSummary.resource_id:type_name -> ddex.v1beta1.Resource.ResourceId
	14, // 7: ddex.v1beta1.MeadMessage.ResourceSummary.display_title:type_name -> ddex.v1beta1.Resource.DisplayTitle
	15, // 8: ddex.v1beta1.MeadMessage.ResourceSummary.display_artist:type_name -> ddex.v1beta1.Resource.DisplayArtist
	9,  // 9: ddex.v1beta1.MeadMessage.ResourceSummary.mood:type_name -> ddex.v1beta1.MeadMessage.Mood
	10, // 10: ddex.v1beta1.MeadMessage.ResourceSummary.beats_per_minute:type_name -> ddex.v1beta1.MeadMessage.BeatsPerMinute
	11, // 11: ddex.v1beta1.MeadMessage.ResourceSummary.harmony:type_name -> ddex.v1beta1.MeadMessage.Harmony
	16, // 12: ddex.v1beta1.MeadMessage.ResourceContributor.party_id:type_name -> ddex.v1beta1.Party.PartyId
	17, // 13: ddex.v1beta1.MeadMessage.ResourceContributor.party_name:type_name -> ddex.v1beta1.Party.PartyName
	18, // 14: ddex.v1beta1.MeadMessage.ReleaseSummary.release_id:type_name -> ddex.v1beta1.Release.ReleaseId
	19, // 15: ddex.v1beta1.MeadMessage.ReleaseSummary.display_title:type_name -> ddex.v1beta1.Release.DisplayTitle
	20, // 16: ddex.v1beta1.MeadMessage.ReleaseSummary.display_artist:type_name -> ddex.v1beta1.Release.DisplayArtist
	8,  // 17: ddex.v1beta1.MeadMessage.ReleaseInformationList.release_information:type_name -> ddex.v1beta1.MeadMessage.ReleaseInformation
	6,  // 18: ddex.v1beta1.MeadMessage.ReleaseInformation.release_summary:type_name -> ddex.v1beta1.MeadMessage.ReleaseSummary
	9,  // 19: ddex.v1beta1.MeadMessage.ReleaseInformation.mood:type_name -> ddex.v1beta1.MeadMessage.Mood
	10, // 20: ddex.v1beta1.MeadMessage.ReleaseInformation.beats_per_minute:type_name -> ddex.v1beta1.MeadMessage.BeatsPerMinute
	11, // 21: ddex.v1beta1.MeadMessage.ReleaseInformation.harmony:type_name -> ddex.v1beta1.MeadMessage.Harmony
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_ddex_v1beta1_mead_proto_init() }
func file_ddex_v1beta1_mead_proto_init() {
	if File_ddex_v1beta1_mead_proto != nil {
		return
	}
	file_ddex_v1beta1_common_proto_init()
	file_ddex_v1beta1_party_proto_init()
	file_ddex_v1beta1_release_proto_init()
	file_ddex_v1beta1_resource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ddex_v1beta1_mead_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessageAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_ResourceInformationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_ResourceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_ResourceSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_ResourceContributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_ReleaseSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_ReleaseInformationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_ReleaseInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_Mood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_BeatsPerMinute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_mead_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeadMessage_Harmony); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ddex_v1beta1_mead_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_ddex_v1beta1_mead_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ddex_v1beta1_mead_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ddex_v1beta1_mead_proto_goTypes,
		DependencyIndexes: file_ddex_v1beta1_mead_proto_depIdxs,
		MessageInfos:      file_ddex_v1beta1_mead_proto_msgTypes,
	}.Build()
	File_ddex_v1beta1_mead_proto = out.File
	file_ddex_v1beta1_mead_proto_rawDesc = nil
	file_ddex_v1beta1_mead_proto_goTypes = nil
	file_ddex_v1beta1_mead_proto_depIdxs = nil
}
