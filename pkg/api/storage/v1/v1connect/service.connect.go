// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: storage/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/OpenAudio/go-openaudio/pkg/api/storage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServicePingProcedure is the fully-qualified name of the StorageService's Ping RPC.
	StorageServicePingProcedure = "/storage.v1.StorageService/Ping"
	// StorageServiceGetHealthProcedure is the fully-qualified name of the StorageService's GetHealth
	// RPC.
	StorageServiceGetHealthProcedure = "/storage.v1.StorageService/GetHealth"
	// StorageServiceUploadFilesProcedure is the fully-qualified name of the StorageService's
	// UploadFiles RPC.
	StorageServiceUploadFilesProcedure = "/storage.v1.StorageService/UploadFiles"
	// StorageServiceGetUploadProcedure is the fully-qualified name of the StorageService's GetUpload
	// RPC.
	StorageServiceGetUploadProcedure = "/storage.v1.StorageService/GetUpload"
	// StorageServiceStreamTrackProcedure is the fully-qualified name of the StorageService's
	// StreamTrack RPC.
	StorageServiceStreamTrackProcedure = "/storage.v1.StorageService/StreamTrack"
	// StorageServiceGetStreamURLProcedure is the fully-qualified name of the StorageService's
	// GetStreamURL RPC.
	StorageServiceGetStreamURLProcedure = "/storage.v1.StorageService/GetStreamURL"
	// StorageServiceGetIPDataProcedure is the fully-qualified name of the StorageService's GetIPData
	// RPC.
	StorageServiceGetIPDataProcedure = "/storage.v1.StorageService/GetIPData"
	// StorageServiceGetRendezvousNodesProcedure is the fully-qualified name of the StorageService's
	// GetRendezvousNodes RPC.
	StorageServiceGetRendezvousNodesProcedure = "/storage.v1.StorageService/GetRendezvousNodes"
	// StorageServiceGetStatusProcedure is the fully-qualified name of the StorageService's GetStatus
	// RPC.
	StorageServiceGetStatusProcedure = "/storage.v1.StorageService/GetStatus"
)

// StorageServiceClient is a client for the storage.v1.StorageService service.
type StorageServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	UploadFiles(context.Context, *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error)
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest]) (*connect.ServerStreamForClient[v1.StreamTrackResponse], error)
	GetStreamURL(context.Context, *connect.Request[v1.GetStreamURLRequest]) (*connect.Response[v1.GetStreamURLResponse], error)
	GetIPData(context.Context, *connect.Request[v1.GetIPDataRequest]) (*connect.Response[v1.GetIPDataResponse], error)
	GetRendezvousNodes(context.Context, *connect.Request[v1.GetRendezvousNodesRequest]) (*connect.Response[v1.GetRendezvousNodesResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
}

// NewStorageServiceClient constructs a client for the storage.v1.StorageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storageServiceMethods := v1.File_storage_v1_service_proto.Services().ByName("StorageService").Methods()
	return &storageServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+StorageServicePingProcedure,
			connect.WithSchema(storageServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		getHealth: connect.NewClient[v1.GetHealthRequest, v1.GetHealthResponse](
			httpClient,
			baseURL+StorageServiceGetHealthProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetHealth")),
			connect.WithClientOptions(opts...),
		),
		uploadFiles: connect.NewClient[v1.UploadFilesRequest, v1.UploadFilesResponse](
			httpClient,
			baseURL+StorageServiceUploadFilesProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UploadFiles")),
			connect.WithClientOptions(opts...),
		),
		getUpload: connect.NewClient[v1.GetUploadRequest, v1.GetUploadResponse](
			httpClient,
			baseURL+StorageServiceGetUploadProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetUpload")),
			connect.WithClientOptions(opts...),
		),
		streamTrack: connect.NewClient[v1.StreamTrackRequest, v1.StreamTrackResponse](
			httpClient,
			baseURL+StorageServiceStreamTrackProcedure,
			connect.WithSchema(storageServiceMethods.ByName("StreamTrack")),
			connect.WithClientOptions(opts...),
		),
		getStreamURL: connect.NewClient[v1.GetStreamURLRequest, v1.GetStreamURLResponse](
			httpClient,
			baseURL+StorageServiceGetStreamURLProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetStreamURL")),
			connect.WithClientOptions(opts...),
		),
		getIPData: connect.NewClient[v1.GetIPDataRequest, v1.GetIPDataResponse](
			httpClient,
			baseURL+StorageServiceGetIPDataProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetIPData")),
			connect.WithClientOptions(opts...),
		),
		getRendezvousNodes: connect.NewClient[v1.GetRendezvousNodesRequest, v1.GetRendezvousNodesResponse](
			httpClient,
			baseURL+StorageServiceGetRendezvousNodesProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetRendezvousNodes")),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+StorageServiceGetStatusProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	ping               *connect.Client[v1.PingRequest, v1.PingResponse]
	getHealth          *connect.Client[v1.GetHealthRequest, v1.GetHealthResponse]
	uploadFiles        *connect.Client[v1.UploadFilesRequest, v1.UploadFilesResponse]
	getUpload          *connect.Client[v1.GetUploadRequest, v1.GetUploadResponse]
	streamTrack        *connect.Client[v1.StreamTrackRequest, v1.StreamTrackResponse]
	getStreamURL       *connect.Client[v1.GetStreamURLRequest, v1.GetStreamURLResponse]
	getIPData          *connect.Client[v1.GetIPDataRequest, v1.GetIPDataResponse]
	getRendezvousNodes *connect.Client[v1.GetRendezvousNodesRequest, v1.GetRendezvousNodesResponse]
	getStatus          *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
}

// Ping calls storage.v1.StorageService.Ping.
func (c *storageServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetHealth calls storage.v1.StorageService.GetHealth.
func (c *storageServiceClient) GetHealth(ctx context.Context, req *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return c.getHealth.CallUnary(ctx, req)
}

// UploadFiles calls storage.v1.StorageService.UploadFiles.
func (c *storageServiceClient) UploadFiles(ctx context.Context, req *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error) {
	return c.uploadFiles.CallUnary(ctx, req)
}

// GetUpload calls storage.v1.StorageService.GetUpload.
func (c *storageServiceClient) GetUpload(ctx context.Context, req *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return c.getUpload.CallUnary(ctx, req)
}

// StreamTrack calls storage.v1.StorageService.StreamTrack.
func (c *storageServiceClient) StreamTrack(ctx context.Context, req *connect.Request[v1.StreamTrackRequest]) (*connect.ServerStreamForClient[v1.StreamTrackResponse], error) {
	return c.streamTrack.CallServerStream(ctx, req)
}

// GetStreamURL calls storage.v1.StorageService.GetStreamURL.
func (c *storageServiceClient) GetStreamURL(ctx context.Context, req *connect.Request[v1.GetStreamURLRequest]) (*connect.Response[v1.GetStreamURLResponse], error) {
	return c.getStreamURL.CallUnary(ctx, req)
}

// GetIPData calls storage.v1.StorageService.GetIPData.
func (c *storageServiceClient) GetIPData(ctx context.Context, req *connect.Request[v1.GetIPDataRequest]) (*connect.Response[v1.GetIPDataResponse], error) {
	return c.getIPData.CallUnary(ctx, req)
}

// GetRendezvousNodes calls storage.v1.StorageService.GetRendezvousNodes.
func (c *storageServiceClient) GetRendezvousNodes(ctx context.Context, req *connect.Request[v1.GetRendezvousNodesRequest]) (*connect.Response[v1.GetRendezvousNodesResponse], error) {
	return c.getRendezvousNodes.CallUnary(ctx, req)
}

// GetStatus calls storage.v1.StorageService.GetStatus.
func (c *storageServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the storage.v1.StorageService service.
type StorageServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	UploadFiles(context.Context, *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error)
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest], *connect.ServerStream[v1.StreamTrackResponse]) error
	GetStreamURL(context.Context, *connect.Request[v1.GetStreamURLRequest]) (*connect.Response[v1.GetStreamURLResponse], error)
	GetIPData(context.Context, *connect.Request[v1.GetIPDataRequest]) (*connect.Response[v1.GetIPDataResponse], error)
	GetRendezvousNodes(context.Context, *connect.Request[v1.GetRendezvousNodesRequest]) (*connect.Response[v1.GetRendezvousNodesResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceMethods := v1.File_storage_v1_service_proto.Services().ByName("StorageService").Methods()
	storageServicePingHandler := connect.NewUnaryHandler(
		StorageServicePingProcedure,
		svc.Ping,
		connect.WithSchema(storageServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetHealthHandler := connect.NewUnaryHandler(
		StorageServiceGetHealthProcedure,
		svc.GetHealth,
		connect.WithSchema(storageServiceMethods.ByName("GetHealth")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUploadFilesHandler := connect.NewUnaryHandler(
		StorageServiceUploadFilesProcedure,
		svc.UploadFiles,
		connect.WithSchema(storageServiceMethods.ByName("UploadFiles")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetUploadHandler := connect.NewUnaryHandler(
		StorageServiceGetUploadProcedure,
		svc.GetUpload,
		connect.WithSchema(storageServiceMethods.ByName("GetUpload")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStreamTrackHandler := connect.NewServerStreamHandler(
		StorageServiceStreamTrackProcedure,
		svc.StreamTrack,
		connect.WithSchema(storageServiceMethods.ByName("StreamTrack")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetStreamURLHandler := connect.NewUnaryHandler(
		StorageServiceGetStreamURLProcedure,
		svc.GetStreamURL,
		connect.WithSchema(storageServiceMethods.ByName("GetStreamURL")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetIPDataHandler := connect.NewUnaryHandler(
		StorageServiceGetIPDataProcedure,
		svc.GetIPData,
		connect.WithSchema(storageServiceMethods.ByName("GetIPData")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetRendezvousNodesHandler := connect.NewUnaryHandler(
		StorageServiceGetRendezvousNodesProcedure,
		svc.GetRendezvousNodes,
		connect.WithSchema(storageServiceMethods.ByName("GetRendezvousNodes")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetStatusHandler := connect.NewUnaryHandler(
		StorageServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(storageServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServicePingProcedure:
			storageServicePingHandler.ServeHTTP(w, r)
		case StorageServiceGetHealthProcedure:
			storageServiceGetHealthHandler.ServeHTTP(w, r)
		case StorageServiceUploadFilesProcedure:
			storageServiceUploadFilesHandler.ServeHTTP(w, r)
		case StorageServiceGetUploadProcedure:
			storageServiceGetUploadHandler.ServeHTTP(w, r)
		case StorageServiceStreamTrackProcedure:
			storageServiceStreamTrackHandler.ServeHTTP(w, r)
		case StorageServiceGetStreamURLProcedure:
			storageServiceGetStreamURLHandler.ServeHTTP(w, r)
		case StorageServiceGetIPDataProcedure:
			storageServiceGetIPDataHandler.ServeHTTP(w, r)
		case StorageServiceGetRendezvousNodesProcedure:
			storageServiceGetRendezvousNodesHandler.ServeHTTP(w, r)
		case StorageServiceGetStatusProcedure:
			storageServiceGetStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.Ping is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetHealth is not implemented"))
}

func (UnimplementedStorageServiceHandler) UploadFiles(context.Context, *connect.Request[v1.UploadFilesRequest]) (*connect.Response[v1.UploadFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.UploadFiles is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetUpload is not implemented"))
}

func (UnimplementedStorageServiceHandler) StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest], *connect.ServerStream[v1.StreamTrackResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.StreamTrack is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetStreamURL(context.Context, *connect.Request[v1.GetStreamURLRequest]) (*connect.Response[v1.GetStreamURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetStreamURL is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetIPData(context.Context, *connect.Request[v1.GetIPDataRequest]) (*connect.Response[v1.GetIPDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetIPData is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetRendezvousNodes(context.Context, *connect.Request[v1.GetRendezvousNodesRequest]) (*connect.Response[v1.GetRendezvousNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetRendezvousNodes is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetStatus is not implemented"))
}
