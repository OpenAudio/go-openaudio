// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/OpenAudio/go-openaudio/pkg/api/core/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CoreServiceName is the fully-qualified name of the CoreService service.
	CoreServiceName = "core.v1.CoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CoreServicePingProcedure is the fully-qualified name of the CoreService's Ping RPC.
	CoreServicePingProcedure = "/core.v1.CoreService/Ping"
	// CoreServiceGetHealthProcedure is the fully-qualified name of the CoreService's GetHealth RPC.
	CoreServiceGetHealthProcedure = "/core.v1.CoreService/GetHealth"
	// CoreServiceGetStatusProcedure is the fully-qualified name of the CoreService's GetStatus RPC.
	CoreServiceGetStatusProcedure = "/core.v1.CoreService/GetStatus"
	// CoreServiceGetNodeInfoProcedure is the fully-qualified name of the CoreService's GetNodeInfo RPC.
	CoreServiceGetNodeInfoProcedure = "/core.v1.CoreService/GetNodeInfo"
	// CoreServiceGetBlockProcedure is the fully-qualified name of the CoreService's GetBlock RPC.
	CoreServiceGetBlockProcedure = "/core.v1.CoreService/GetBlock"
	// CoreServiceGetBlocksProcedure is the fully-qualified name of the CoreService's GetBlocks RPC.
	CoreServiceGetBlocksProcedure = "/core.v1.CoreService/GetBlocks"
	// CoreServiceGetTransactionProcedure is the fully-qualified name of the CoreService's
	// GetTransaction RPC.
	CoreServiceGetTransactionProcedure = "/core.v1.CoreService/GetTransaction"
	// CoreServiceSendTransactionProcedure is the fully-qualified name of the CoreService's
	// SendTransaction RPC.
	CoreServiceSendTransactionProcedure = "/core.v1.CoreService/SendTransaction"
	// CoreServiceForwardTransactionProcedure is the fully-qualified name of the CoreService's
	// ForwardTransaction RPC.
	CoreServiceForwardTransactionProcedure = "/core.v1.CoreService/ForwardTransaction"
	// CoreServiceGetRegistrationAttestationProcedure is the fully-qualified name of the CoreService's
	// GetRegistrationAttestation RPC.
	CoreServiceGetRegistrationAttestationProcedure = "/core.v1.CoreService/GetRegistrationAttestation"
	// CoreServiceGetDeregistrationAttestationProcedure is the fully-qualified name of the CoreService's
	// GetDeregistrationAttestation RPC.
	CoreServiceGetDeregistrationAttestationProcedure = "/core.v1.CoreService/GetDeregistrationAttestation"
	// CoreServiceGetStoredSnapshotsProcedure is the fully-qualified name of the CoreService's
	// GetStoredSnapshots RPC.
	CoreServiceGetStoredSnapshotsProcedure = "/core.v1.CoreService/GetStoredSnapshots"
	// CoreServiceGetSlashAttestationProcedure is the fully-qualified name of the CoreService's
	// GetSlashAttestation RPC.
	CoreServiceGetSlashAttestationProcedure = "/core.v1.CoreService/GetSlashAttestation"
	// CoreServiceGetSlashAttestationsProcedure is the fully-qualified name of the CoreService's
	// GetSlashAttestations RPC.
	CoreServiceGetSlashAttestationsProcedure = "/core.v1.CoreService/GetSlashAttestations"
	// CoreServiceGetERNProcedure is the fully-qualified name of the CoreService's GetERN RPC.
	CoreServiceGetERNProcedure = "/core.v1.CoreService/GetERN"
	// CoreServiceGetMEADProcedure is the fully-qualified name of the CoreService's GetMEAD RPC.
	CoreServiceGetMEADProcedure = "/core.v1.CoreService/GetMEAD"
	// CoreServiceGetPIEProcedure is the fully-qualified name of the CoreService's GetPIE RPC.
	CoreServiceGetPIEProcedure = "/core.v1.CoreService/GetPIE"
	// CoreServiceGetRewardProcedure is the fully-qualified name of the CoreService's GetReward RPC.
	CoreServiceGetRewardProcedure = "/core.v1.CoreService/GetReward"
	// CoreServiceGetRewardsProcedure is the fully-qualified name of the CoreService's GetRewards RPC.
	CoreServiceGetRewardsProcedure = "/core.v1.CoreService/GetRewards"
	// CoreServiceGetRewardAttestationProcedure is the fully-qualified name of the CoreService's
	// GetRewardAttestation RPC.
	CoreServiceGetRewardAttestationProcedure = "/core.v1.CoreService/GetRewardAttestation"
	// CoreServiceGetStreamURLsProcedure is the fully-qualified name of the CoreService's GetStreamURLs
	// RPC.
	CoreServiceGetStreamURLsProcedure = "/core.v1.CoreService/GetStreamURLs"
	// CoreServiceGetUploadByCIDProcedure is the fully-qualified name of the CoreService's
	// GetUploadByCID RPC.
	CoreServiceGetUploadByCIDProcedure = "/core.v1.CoreService/GetUploadByCID"
)

// CoreServiceClient is a client for the core.v1.CoreService service.
type CoreServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	GetNodeInfo(context.Context, *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error)
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	GetBlocks(context.Context, *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	ForwardTransaction(context.Context, *connect.Request[v1.ForwardTransactionRequest]) (*connect.Response[v1.ForwardTransactionResponse], error)
	GetRegistrationAttestation(context.Context, *connect.Request[v1.GetRegistrationAttestationRequest]) (*connect.Response[v1.GetRegistrationAttestationResponse], error)
	GetDeregistrationAttestation(context.Context, *connect.Request[v1.GetDeregistrationAttestationRequest]) (*connect.Response[v1.GetDeregistrationAttestationResponse], error)
	GetStoredSnapshots(context.Context, *connect.Request[v1.GetStoredSnapshotsRequest]) (*connect.Response[v1.GetStoredSnapshotsResponse], error)
	GetSlashAttestation(context.Context, *connect.Request[v1.GetSlashAttestationRequest]) (*connect.Response[v1.GetSlashAttestationResponse], error)
	GetSlashAttestations(context.Context, *connect.Request[v1.GetSlashAttestationsRequest]) (*connect.Response[v1.GetSlashAttestationsResponse], error)
	GetERN(context.Context, *connect.Request[v1.GetERNRequest]) (*connect.Response[v1.GetERNResponse], error)
	GetMEAD(context.Context, *connect.Request[v1.GetMEADRequest]) (*connect.Response[v1.GetMEADResponse], error)
	GetPIE(context.Context, *connect.Request[v1.GetPIERequest]) (*connect.Response[v1.GetPIEResponse], error)
	GetReward(context.Context, *connect.Request[v1.GetRewardRequest]) (*connect.Response[v1.GetRewardResponse], error)
	GetRewards(context.Context, *connect.Request[v1.GetRewardsRequest]) (*connect.Response[v1.GetRewardsResponse], error)
	GetRewardAttestation(context.Context, *connect.Request[v1.GetRewardAttestationRequest]) (*connect.Response[v1.GetRewardAttestationResponse], error)
	GetStreamURLs(context.Context, *connect.Request[v1.GetStreamURLsRequest]) (*connect.Response[v1.GetStreamURLsResponse], error)
	GetUploadByCID(context.Context, *connect.Request[v1.GetUploadByCIDRequest]) (*connect.Response[v1.GetUploadByCIDResponse], error)
}

// NewCoreServiceClient constructs a client for the core.v1.CoreService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	coreServiceMethods := v1.File_core_v1_service_proto.Services().ByName("CoreService").Methods()
	return &coreServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+CoreServicePingProcedure,
			connect.WithSchema(coreServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		getHealth: connect.NewClient[v1.GetHealthRequest, v1.GetHealthResponse](
			httpClient,
			baseURL+CoreServiceGetHealthProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetHealth")),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+CoreServiceGetStatusProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
		getNodeInfo: connect.NewClient[v1.GetNodeInfoRequest, v1.GetNodeInfoResponse](
			httpClient,
			baseURL+CoreServiceGetNodeInfoProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetNodeInfo")),
			connect.WithClientOptions(opts...),
		),
		getBlock: connect.NewClient[v1.GetBlockRequest, v1.GetBlockResponse](
			httpClient,
			baseURL+CoreServiceGetBlockProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetBlock")),
			connect.WithClientOptions(opts...),
		),
		getBlocks: connect.NewClient[v1.GetBlocksRequest, v1.GetBlocksResponse](
			httpClient,
			baseURL+CoreServiceGetBlocksProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetBlocks")),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+CoreServiceGetTransactionProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetTransaction")),
			connect.WithClientOptions(opts...),
		),
		sendTransaction: connect.NewClient[v1.SendTransactionRequest, v1.SendTransactionResponse](
			httpClient,
			baseURL+CoreServiceSendTransactionProcedure,
			connect.WithSchema(coreServiceMethods.ByName("SendTransaction")),
			connect.WithClientOptions(opts...),
		),
		forwardTransaction: connect.NewClient[v1.ForwardTransactionRequest, v1.ForwardTransactionResponse](
			httpClient,
			baseURL+CoreServiceForwardTransactionProcedure,
			connect.WithSchema(coreServiceMethods.ByName("ForwardTransaction")),
			connect.WithClientOptions(opts...),
		),
		getRegistrationAttestation: connect.NewClient[v1.GetRegistrationAttestationRequest, v1.GetRegistrationAttestationResponse](
			httpClient,
			baseURL+CoreServiceGetRegistrationAttestationProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetRegistrationAttestation")),
			connect.WithClientOptions(opts...),
		),
		getDeregistrationAttestation: connect.NewClient[v1.GetDeregistrationAttestationRequest, v1.GetDeregistrationAttestationResponse](
			httpClient,
			baseURL+CoreServiceGetDeregistrationAttestationProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetDeregistrationAttestation")),
			connect.WithClientOptions(opts...),
		),
		getStoredSnapshots: connect.NewClient[v1.GetStoredSnapshotsRequest, v1.GetStoredSnapshotsResponse](
			httpClient,
			baseURL+CoreServiceGetStoredSnapshotsProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetStoredSnapshots")),
			connect.WithClientOptions(opts...),
		),
		getSlashAttestation: connect.NewClient[v1.GetSlashAttestationRequest, v1.GetSlashAttestationResponse](
			httpClient,
			baseURL+CoreServiceGetSlashAttestationProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetSlashAttestation")),
			connect.WithClientOptions(opts...),
		),
		getSlashAttestations: connect.NewClient[v1.GetSlashAttestationsRequest, v1.GetSlashAttestationsResponse](
			httpClient,
			baseURL+CoreServiceGetSlashAttestationsProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetSlashAttestations")),
			connect.WithClientOptions(opts...),
		),
		getERN: connect.NewClient[v1.GetERNRequest, v1.GetERNResponse](
			httpClient,
			baseURL+CoreServiceGetERNProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetERN")),
			connect.WithClientOptions(opts...),
		),
		getMEAD: connect.NewClient[v1.GetMEADRequest, v1.GetMEADResponse](
			httpClient,
			baseURL+CoreServiceGetMEADProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetMEAD")),
			connect.WithClientOptions(opts...),
		),
		getPIE: connect.NewClient[v1.GetPIERequest, v1.GetPIEResponse](
			httpClient,
			baseURL+CoreServiceGetPIEProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetPIE")),
			connect.WithClientOptions(opts...),
		),
		getReward: connect.NewClient[v1.GetRewardRequest, v1.GetRewardResponse](
			httpClient,
			baseURL+CoreServiceGetRewardProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetReward")),
			connect.WithClientOptions(opts...),
		),
		getRewards: connect.NewClient[v1.GetRewardsRequest, v1.GetRewardsResponse](
			httpClient,
			baseURL+CoreServiceGetRewardsProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetRewards")),
			connect.WithClientOptions(opts...),
		),
		getRewardAttestation: connect.NewClient[v1.GetRewardAttestationRequest, v1.GetRewardAttestationResponse](
			httpClient,
			baseURL+CoreServiceGetRewardAttestationProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetRewardAttestation")),
			connect.WithClientOptions(opts...),
		),
		getStreamURLs: connect.NewClient[v1.GetStreamURLsRequest, v1.GetStreamURLsResponse](
			httpClient,
			baseURL+CoreServiceGetStreamURLsProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetStreamURLs")),
			connect.WithClientOptions(opts...),
		),
		getUploadByCID: connect.NewClient[v1.GetUploadByCIDRequest, v1.GetUploadByCIDResponse](
			httpClient,
			baseURL+CoreServiceGetUploadByCIDProcedure,
			connect.WithSchema(coreServiceMethods.ByName("GetUploadByCID")),
			connect.WithClientOptions(opts...),
		),
	}
}

// coreServiceClient implements CoreServiceClient.
type coreServiceClient struct {
	ping                         *connect.Client[v1.PingRequest, v1.PingResponse]
	getHealth                    *connect.Client[v1.GetHealthRequest, v1.GetHealthResponse]
	getStatus                    *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
	getNodeInfo                  *connect.Client[v1.GetNodeInfoRequest, v1.GetNodeInfoResponse]
	getBlock                     *connect.Client[v1.GetBlockRequest, v1.GetBlockResponse]
	getBlocks                    *connect.Client[v1.GetBlocksRequest, v1.GetBlocksResponse]
	getTransaction               *connect.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
	sendTransaction              *connect.Client[v1.SendTransactionRequest, v1.SendTransactionResponse]
	forwardTransaction           *connect.Client[v1.ForwardTransactionRequest, v1.ForwardTransactionResponse]
	getRegistrationAttestation   *connect.Client[v1.GetRegistrationAttestationRequest, v1.GetRegistrationAttestationResponse]
	getDeregistrationAttestation *connect.Client[v1.GetDeregistrationAttestationRequest, v1.GetDeregistrationAttestationResponse]
	getStoredSnapshots           *connect.Client[v1.GetStoredSnapshotsRequest, v1.GetStoredSnapshotsResponse]
	getSlashAttestation          *connect.Client[v1.GetSlashAttestationRequest, v1.GetSlashAttestationResponse]
	getSlashAttestations         *connect.Client[v1.GetSlashAttestationsRequest, v1.GetSlashAttestationsResponse]
	getERN                       *connect.Client[v1.GetERNRequest, v1.GetERNResponse]
	getMEAD                      *connect.Client[v1.GetMEADRequest, v1.GetMEADResponse]
	getPIE                       *connect.Client[v1.GetPIERequest, v1.GetPIEResponse]
	getReward                    *connect.Client[v1.GetRewardRequest, v1.GetRewardResponse]
	getRewards                   *connect.Client[v1.GetRewardsRequest, v1.GetRewardsResponse]
	getRewardAttestation         *connect.Client[v1.GetRewardAttestationRequest, v1.GetRewardAttestationResponse]
	getStreamURLs                *connect.Client[v1.GetStreamURLsRequest, v1.GetStreamURLsResponse]
	getUploadByCID               *connect.Client[v1.GetUploadByCIDRequest, v1.GetUploadByCIDResponse]
}

// Ping calls core.v1.CoreService.Ping.
func (c *coreServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetHealth calls core.v1.CoreService.GetHealth.
func (c *coreServiceClient) GetHealth(ctx context.Context, req *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return c.getHealth.CallUnary(ctx, req)
}

// GetStatus calls core.v1.CoreService.GetStatus.
func (c *coreServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// GetNodeInfo calls core.v1.CoreService.GetNodeInfo.
func (c *coreServiceClient) GetNodeInfo(ctx context.Context, req *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error) {
	return c.getNodeInfo.CallUnary(ctx, req)
}

// GetBlock calls core.v1.CoreService.GetBlock.
func (c *coreServiceClient) GetBlock(ctx context.Context, req *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetBlocks calls core.v1.CoreService.GetBlocks.
func (c *coreServiceClient) GetBlocks(ctx context.Context, req *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error) {
	return c.getBlocks.CallUnary(ctx, req)
}

// GetTransaction calls core.v1.CoreService.GetTransaction.
func (c *coreServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// SendTransaction calls core.v1.CoreService.SendTransaction.
func (c *coreServiceClient) SendTransaction(ctx context.Context, req *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return c.sendTransaction.CallUnary(ctx, req)
}

// ForwardTransaction calls core.v1.CoreService.ForwardTransaction.
func (c *coreServiceClient) ForwardTransaction(ctx context.Context, req *connect.Request[v1.ForwardTransactionRequest]) (*connect.Response[v1.ForwardTransactionResponse], error) {
	return c.forwardTransaction.CallUnary(ctx, req)
}

// GetRegistrationAttestation calls core.v1.CoreService.GetRegistrationAttestation.
func (c *coreServiceClient) GetRegistrationAttestation(ctx context.Context, req *connect.Request[v1.GetRegistrationAttestationRequest]) (*connect.Response[v1.GetRegistrationAttestationResponse], error) {
	return c.getRegistrationAttestation.CallUnary(ctx, req)
}

// GetDeregistrationAttestation calls core.v1.CoreService.GetDeregistrationAttestation.
func (c *coreServiceClient) GetDeregistrationAttestation(ctx context.Context, req *connect.Request[v1.GetDeregistrationAttestationRequest]) (*connect.Response[v1.GetDeregistrationAttestationResponse], error) {
	return c.getDeregistrationAttestation.CallUnary(ctx, req)
}

// GetStoredSnapshots calls core.v1.CoreService.GetStoredSnapshots.
func (c *coreServiceClient) GetStoredSnapshots(ctx context.Context, req *connect.Request[v1.GetStoredSnapshotsRequest]) (*connect.Response[v1.GetStoredSnapshotsResponse], error) {
	return c.getStoredSnapshots.CallUnary(ctx, req)
}

// GetSlashAttestation calls core.v1.CoreService.GetSlashAttestation.
func (c *coreServiceClient) GetSlashAttestation(ctx context.Context, req *connect.Request[v1.GetSlashAttestationRequest]) (*connect.Response[v1.GetSlashAttestationResponse], error) {
	return c.getSlashAttestation.CallUnary(ctx, req)
}

// GetSlashAttestations calls core.v1.CoreService.GetSlashAttestations.
func (c *coreServiceClient) GetSlashAttestations(ctx context.Context, req *connect.Request[v1.GetSlashAttestationsRequest]) (*connect.Response[v1.GetSlashAttestationsResponse], error) {
	return c.getSlashAttestations.CallUnary(ctx, req)
}

// GetERN calls core.v1.CoreService.GetERN.
func (c *coreServiceClient) GetERN(ctx context.Context, req *connect.Request[v1.GetERNRequest]) (*connect.Response[v1.GetERNResponse], error) {
	return c.getERN.CallUnary(ctx, req)
}

// GetMEAD calls core.v1.CoreService.GetMEAD.
func (c *coreServiceClient) GetMEAD(ctx context.Context, req *connect.Request[v1.GetMEADRequest]) (*connect.Response[v1.GetMEADResponse], error) {
	return c.getMEAD.CallUnary(ctx, req)
}

// GetPIE calls core.v1.CoreService.GetPIE.
func (c *coreServiceClient) GetPIE(ctx context.Context, req *connect.Request[v1.GetPIERequest]) (*connect.Response[v1.GetPIEResponse], error) {
	return c.getPIE.CallUnary(ctx, req)
}

// GetReward calls core.v1.CoreService.GetReward.
func (c *coreServiceClient) GetReward(ctx context.Context, req *connect.Request[v1.GetRewardRequest]) (*connect.Response[v1.GetRewardResponse], error) {
	return c.getReward.CallUnary(ctx, req)
}

// GetRewards calls core.v1.CoreService.GetRewards.
func (c *coreServiceClient) GetRewards(ctx context.Context, req *connect.Request[v1.GetRewardsRequest]) (*connect.Response[v1.GetRewardsResponse], error) {
	return c.getRewards.CallUnary(ctx, req)
}

// GetRewardAttestation calls core.v1.CoreService.GetRewardAttestation.
func (c *coreServiceClient) GetRewardAttestation(ctx context.Context, req *connect.Request[v1.GetRewardAttestationRequest]) (*connect.Response[v1.GetRewardAttestationResponse], error) {
	return c.getRewardAttestation.CallUnary(ctx, req)
}

// GetStreamURLs calls core.v1.CoreService.GetStreamURLs.
func (c *coreServiceClient) GetStreamURLs(ctx context.Context, req *connect.Request[v1.GetStreamURLsRequest]) (*connect.Response[v1.GetStreamURLsResponse], error) {
	return c.getStreamURLs.CallUnary(ctx, req)
}

// GetUploadByCID calls core.v1.CoreService.GetUploadByCID.
func (c *coreServiceClient) GetUploadByCID(ctx context.Context, req *connect.Request[v1.GetUploadByCIDRequest]) (*connect.Response[v1.GetUploadByCIDResponse], error) {
	return c.getUploadByCID.CallUnary(ctx, req)
}

// CoreServiceHandler is an implementation of the core.v1.CoreService service.
type CoreServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	GetNodeInfo(context.Context, *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error)
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	GetBlocks(context.Context, *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	ForwardTransaction(context.Context, *connect.Request[v1.ForwardTransactionRequest]) (*connect.Response[v1.ForwardTransactionResponse], error)
	GetRegistrationAttestation(context.Context, *connect.Request[v1.GetRegistrationAttestationRequest]) (*connect.Response[v1.GetRegistrationAttestationResponse], error)
	GetDeregistrationAttestation(context.Context, *connect.Request[v1.GetDeregistrationAttestationRequest]) (*connect.Response[v1.GetDeregistrationAttestationResponse], error)
	GetStoredSnapshots(context.Context, *connect.Request[v1.GetStoredSnapshotsRequest]) (*connect.Response[v1.GetStoredSnapshotsResponse], error)
	GetSlashAttestation(context.Context, *connect.Request[v1.GetSlashAttestationRequest]) (*connect.Response[v1.GetSlashAttestationResponse], error)
	GetSlashAttestations(context.Context, *connect.Request[v1.GetSlashAttestationsRequest]) (*connect.Response[v1.GetSlashAttestationsResponse], error)
	GetERN(context.Context, *connect.Request[v1.GetERNRequest]) (*connect.Response[v1.GetERNResponse], error)
	GetMEAD(context.Context, *connect.Request[v1.GetMEADRequest]) (*connect.Response[v1.GetMEADResponse], error)
	GetPIE(context.Context, *connect.Request[v1.GetPIERequest]) (*connect.Response[v1.GetPIEResponse], error)
	GetReward(context.Context, *connect.Request[v1.GetRewardRequest]) (*connect.Response[v1.GetRewardResponse], error)
	GetRewards(context.Context, *connect.Request[v1.GetRewardsRequest]) (*connect.Response[v1.GetRewardsResponse], error)
	GetRewardAttestation(context.Context, *connect.Request[v1.GetRewardAttestationRequest]) (*connect.Response[v1.GetRewardAttestationResponse], error)
	GetStreamURLs(context.Context, *connect.Request[v1.GetStreamURLsRequest]) (*connect.Response[v1.GetStreamURLsResponse], error)
	GetUploadByCID(context.Context, *connect.Request[v1.GetUploadByCIDRequest]) (*connect.Response[v1.GetUploadByCIDResponse], error)
}

// NewCoreServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoreServiceHandler(svc CoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	coreServiceMethods := v1.File_core_v1_service_proto.Services().ByName("CoreService").Methods()
	coreServicePingHandler := connect.NewUnaryHandler(
		CoreServicePingProcedure,
		svc.Ping,
		connect.WithSchema(coreServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetHealthHandler := connect.NewUnaryHandler(
		CoreServiceGetHealthProcedure,
		svc.GetHealth,
		connect.WithSchema(coreServiceMethods.ByName("GetHealth")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetStatusHandler := connect.NewUnaryHandler(
		CoreServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(coreServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetNodeInfoHandler := connect.NewUnaryHandler(
		CoreServiceGetNodeInfoProcedure,
		svc.GetNodeInfo,
		connect.WithSchema(coreServiceMethods.ByName("GetNodeInfo")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetBlockHandler := connect.NewUnaryHandler(
		CoreServiceGetBlockProcedure,
		svc.GetBlock,
		connect.WithSchema(coreServiceMethods.ByName("GetBlock")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetBlocksHandler := connect.NewUnaryHandler(
		CoreServiceGetBlocksProcedure,
		svc.GetBlocks,
		connect.WithSchema(coreServiceMethods.ByName("GetBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetTransactionHandler := connect.NewUnaryHandler(
		CoreServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(coreServiceMethods.ByName("GetTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceSendTransactionHandler := connect.NewUnaryHandler(
		CoreServiceSendTransactionProcedure,
		svc.SendTransaction,
		connect.WithSchema(coreServiceMethods.ByName("SendTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceForwardTransactionHandler := connect.NewUnaryHandler(
		CoreServiceForwardTransactionProcedure,
		svc.ForwardTransaction,
		connect.WithSchema(coreServiceMethods.ByName("ForwardTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetRegistrationAttestationHandler := connect.NewUnaryHandler(
		CoreServiceGetRegistrationAttestationProcedure,
		svc.GetRegistrationAttestation,
		connect.WithSchema(coreServiceMethods.ByName("GetRegistrationAttestation")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetDeregistrationAttestationHandler := connect.NewUnaryHandler(
		CoreServiceGetDeregistrationAttestationProcedure,
		svc.GetDeregistrationAttestation,
		connect.WithSchema(coreServiceMethods.ByName("GetDeregistrationAttestation")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetStoredSnapshotsHandler := connect.NewUnaryHandler(
		CoreServiceGetStoredSnapshotsProcedure,
		svc.GetStoredSnapshots,
		connect.WithSchema(coreServiceMethods.ByName("GetStoredSnapshots")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetSlashAttestationHandler := connect.NewUnaryHandler(
		CoreServiceGetSlashAttestationProcedure,
		svc.GetSlashAttestation,
		connect.WithSchema(coreServiceMethods.ByName("GetSlashAttestation")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetSlashAttestationsHandler := connect.NewUnaryHandler(
		CoreServiceGetSlashAttestationsProcedure,
		svc.GetSlashAttestations,
		connect.WithSchema(coreServiceMethods.ByName("GetSlashAttestations")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetERNHandler := connect.NewUnaryHandler(
		CoreServiceGetERNProcedure,
		svc.GetERN,
		connect.WithSchema(coreServiceMethods.ByName("GetERN")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetMEADHandler := connect.NewUnaryHandler(
		CoreServiceGetMEADProcedure,
		svc.GetMEAD,
		connect.WithSchema(coreServiceMethods.ByName("GetMEAD")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetPIEHandler := connect.NewUnaryHandler(
		CoreServiceGetPIEProcedure,
		svc.GetPIE,
		connect.WithSchema(coreServiceMethods.ByName("GetPIE")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetRewardHandler := connect.NewUnaryHandler(
		CoreServiceGetRewardProcedure,
		svc.GetReward,
		connect.WithSchema(coreServiceMethods.ByName("GetReward")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetRewardsHandler := connect.NewUnaryHandler(
		CoreServiceGetRewardsProcedure,
		svc.GetRewards,
		connect.WithSchema(coreServiceMethods.ByName("GetRewards")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetRewardAttestationHandler := connect.NewUnaryHandler(
		CoreServiceGetRewardAttestationProcedure,
		svc.GetRewardAttestation,
		connect.WithSchema(coreServiceMethods.ByName("GetRewardAttestation")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetStreamURLsHandler := connect.NewUnaryHandler(
		CoreServiceGetStreamURLsProcedure,
		svc.GetStreamURLs,
		connect.WithSchema(coreServiceMethods.ByName("GetStreamURLs")),
		connect.WithHandlerOptions(opts...),
	)
	coreServiceGetUploadByCIDHandler := connect.NewUnaryHandler(
		CoreServiceGetUploadByCIDProcedure,
		svc.GetUploadByCID,
		connect.WithSchema(coreServiceMethods.ByName("GetUploadByCID")),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.CoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CoreServicePingProcedure:
			coreServicePingHandler.ServeHTTP(w, r)
		case CoreServiceGetHealthProcedure:
			coreServiceGetHealthHandler.ServeHTTP(w, r)
		case CoreServiceGetStatusProcedure:
			coreServiceGetStatusHandler.ServeHTTP(w, r)
		case CoreServiceGetNodeInfoProcedure:
			coreServiceGetNodeInfoHandler.ServeHTTP(w, r)
		case CoreServiceGetBlockProcedure:
			coreServiceGetBlockHandler.ServeHTTP(w, r)
		case CoreServiceGetBlocksProcedure:
			coreServiceGetBlocksHandler.ServeHTTP(w, r)
		case CoreServiceGetTransactionProcedure:
			coreServiceGetTransactionHandler.ServeHTTP(w, r)
		case CoreServiceSendTransactionProcedure:
			coreServiceSendTransactionHandler.ServeHTTP(w, r)
		case CoreServiceForwardTransactionProcedure:
			coreServiceForwardTransactionHandler.ServeHTTP(w, r)
		case CoreServiceGetRegistrationAttestationProcedure:
			coreServiceGetRegistrationAttestationHandler.ServeHTTP(w, r)
		case CoreServiceGetDeregistrationAttestationProcedure:
			coreServiceGetDeregistrationAttestationHandler.ServeHTTP(w, r)
		case CoreServiceGetStoredSnapshotsProcedure:
			coreServiceGetStoredSnapshotsHandler.ServeHTTP(w, r)
		case CoreServiceGetSlashAttestationProcedure:
			coreServiceGetSlashAttestationHandler.ServeHTTP(w, r)
		case CoreServiceGetSlashAttestationsProcedure:
			coreServiceGetSlashAttestationsHandler.ServeHTTP(w, r)
		case CoreServiceGetERNProcedure:
			coreServiceGetERNHandler.ServeHTTP(w, r)
		case CoreServiceGetMEADProcedure:
			coreServiceGetMEADHandler.ServeHTTP(w, r)
		case CoreServiceGetPIEProcedure:
			coreServiceGetPIEHandler.ServeHTTP(w, r)
		case CoreServiceGetRewardProcedure:
			coreServiceGetRewardHandler.ServeHTTP(w, r)
		case CoreServiceGetRewardsProcedure:
			coreServiceGetRewardsHandler.ServeHTTP(w, r)
		case CoreServiceGetRewardAttestationProcedure:
			coreServiceGetRewardAttestationHandler.ServeHTTP(w, r)
		case CoreServiceGetStreamURLsProcedure:
			coreServiceGetStreamURLsHandler.ServeHTTP(w, r)
		case CoreServiceGetUploadByCIDProcedure:
			coreServiceGetUploadByCIDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoreServiceHandler struct{}

func (UnimplementedCoreServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.Ping is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetHealth is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetStatus is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetNodeInfo(context.Context, *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetNodeInfo is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetBlock is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetBlocks(context.Context, *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetBlocks is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetTransaction is not implemented"))
}

func (UnimplementedCoreServiceHandler) SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.SendTransaction is not implemented"))
}

func (UnimplementedCoreServiceHandler) ForwardTransaction(context.Context, *connect.Request[v1.ForwardTransactionRequest]) (*connect.Response[v1.ForwardTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.ForwardTransaction is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetRegistrationAttestation(context.Context, *connect.Request[v1.GetRegistrationAttestationRequest]) (*connect.Response[v1.GetRegistrationAttestationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetRegistrationAttestation is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetDeregistrationAttestation(context.Context, *connect.Request[v1.GetDeregistrationAttestationRequest]) (*connect.Response[v1.GetDeregistrationAttestationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetDeregistrationAttestation is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetStoredSnapshots(context.Context, *connect.Request[v1.GetStoredSnapshotsRequest]) (*connect.Response[v1.GetStoredSnapshotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetStoredSnapshots is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetSlashAttestation(context.Context, *connect.Request[v1.GetSlashAttestationRequest]) (*connect.Response[v1.GetSlashAttestationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetSlashAttestation is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetSlashAttestations(context.Context, *connect.Request[v1.GetSlashAttestationsRequest]) (*connect.Response[v1.GetSlashAttestationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetSlashAttestations is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetERN(context.Context, *connect.Request[v1.GetERNRequest]) (*connect.Response[v1.GetERNResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetERN is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetMEAD(context.Context, *connect.Request[v1.GetMEADRequest]) (*connect.Response[v1.GetMEADResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetMEAD is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetPIE(context.Context, *connect.Request[v1.GetPIERequest]) (*connect.Response[v1.GetPIEResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetPIE is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetReward(context.Context, *connect.Request[v1.GetRewardRequest]) (*connect.Response[v1.GetRewardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetReward is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetRewards(context.Context, *connect.Request[v1.GetRewardsRequest]) (*connect.Response[v1.GetRewardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetRewards is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetRewardAttestation(context.Context, *connect.Request[v1.GetRewardAttestationRequest]) (*connect.Response[v1.GetRewardAttestationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetRewardAttestation is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetStreamURLs(context.Context, *connect.Request[v1.GetStreamURLsRequest]) (*connect.Response[v1.GetStreamURLsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetStreamURLs is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetUploadByCID(context.Context, *connect.Request[v1.GetUploadByCIDRequest]) (*connect.Response[v1.GetUploadByCIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.CoreService.GetUploadByCID is not implemented"))
}
