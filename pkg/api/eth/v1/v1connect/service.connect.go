// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eth/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/OpenAudio/go-openaudio/pkg/api/eth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EthServiceName is the fully-qualified name of the EthService service.
	EthServiceName = "eth.v1.EthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EthServiceGetStatusProcedure is the fully-qualified name of the EthService's GetStatus RPC.
	EthServiceGetStatusProcedure = "/eth.v1.EthService/GetStatus"
	// EthServiceGetRegisteredEndpointsProcedure is the fully-qualified name of the EthService's
	// GetRegisteredEndpoints RPC.
	EthServiceGetRegisteredEndpointsProcedure = "/eth.v1.EthService/GetRegisteredEndpoints"
	// EthServiceGetRegisteredEndpointsForServiceProviderProcedure is the fully-qualified name of the
	// EthService's GetRegisteredEndpointsForServiceProvider RPC.
	EthServiceGetRegisteredEndpointsForServiceProviderProcedure = "/eth.v1.EthService/GetRegisteredEndpointsForServiceProvider"
	// EthServiceGetRegisteredEndpointInfoProcedure is the fully-qualified name of the EthService's
	// GetRegisteredEndpointInfo RPC.
	EthServiceGetRegisteredEndpointInfoProcedure = "/eth.v1.EthService/GetRegisteredEndpointInfo"
	// EthServiceGetServiceProviderProcedure is the fully-qualified name of the EthService's
	// GetServiceProvider RPC.
	EthServiceGetServiceProviderProcedure = "/eth.v1.EthService/GetServiceProvider"
	// EthServiceGetServiceProvidersProcedure is the fully-qualified name of the EthService's
	// GetServiceProviders RPC.
	EthServiceGetServiceProvidersProcedure = "/eth.v1.EthService/GetServiceProviders"
	// EthServiceGetStakingMetadataForServiceProviderProcedure is the fully-qualified name of the
	// EthService's GetStakingMetadataForServiceProvider RPC.
	EthServiceGetStakingMetadataForServiceProviderProcedure = "/eth.v1.EthService/GetStakingMetadataForServiceProvider"
	// EthServiceGetLatestFundingRoundProcedure is the fully-qualified name of the EthService's
	// GetLatestFundingRound RPC.
	EthServiceGetLatestFundingRoundProcedure = "/eth.v1.EthService/GetLatestFundingRound"
	// EthServiceIsDuplicateDelegateWalletProcedure is the fully-qualified name of the EthService's
	// IsDuplicateDelegateWallet RPC.
	EthServiceIsDuplicateDelegateWalletProcedure = "/eth.v1.EthService/IsDuplicateDelegateWallet"
	// EthServiceRegisterProcedure is the fully-qualified name of the EthService's Register RPC.
	EthServiceRegisterProcedure = "/eth.v1.EthService/Register"
	// EthServiceSubscribeProcedure is the fully-qualified name of the EthService's Subscribe RPC.
	EthServiceSubscribeProcedure = "/eth.v1.EthService/Subscribe"
	// EthServiceGetActiveSlashProposalForAddressProcedure is the fully-qualified name of the
	// EthService's GetActiveSlashProposalForAddress RPC.
	EthServiceGetActiveSlashProposalForAddressProcedure = "/eth.v1.EthService/GetActiveSlashProposalForAddress"
)

// EthServiceClient is a client for the eth.v1.EthService service.
type EthServiceClient interface {
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	GetRegisteredEndpoints(context.Context, *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error)
	GetRegisteredEndpointsForServiceProvider(context.Context, *connect.Request[v1.GetRegisteredEndpointsForServiceProviderRequest]) (*connect.Response[v1.GetRegisteredEndpointsForServiceProviderResponse], error)
	GetRegisteredEndpointInfo(context.Context, *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error)
	GetServiceProvider(context.Context, *connect.Request[v1.GetServiceProviderRequest]) (*connect.Response[v1.GetServiceProviderResponse], error)
	GetServiceProviders(context.Context, *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error)
	GetStakingMetadataForServiceProvider(context.Context, *connect.Request[v1.GetStakingMetadataForServiceProviderRequest]) (*connect.Response[v1.GetStakingMetadataForServiceProviderResponse], error)
	GetLatestFundingRound(context.Context, *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error)
	IsDuplicateDelegateWallet(context.Context, *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Subscribe(context.Context, *connect.Request[v1.SubscriptionRequest]) (*connect.ServerStreamForClient[v1.SubscriptionResponse], error)
	GetActiveSlashProposalForAddress(context.Context, *connect.Request[v1.GetActiveSlashProposalForAddressRequest]) (*connect.Response[v1.GetActiveSlashProposalForAddressResponse], error)
}

// NewEthServiceClient constructs a client for the eth.v1.EthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ethServiceMethods := v1.File_eth_v1_service_proto.Services().ByName("EthService").Methods()
	return &ethServiceClient{
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+EthServiceGetStatusProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
		getRegisteredEndpoints: connect.NewClient[v1.GetRegisteredEndpointsRequest, v1.GetRegisteredEndpointsResponse](
			httpClient,
			baseURL+EthServiceGetRegisteredEndpointsProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpoints")),
			connect.WithClientOptions(opts...),
		),
		getRegisteredEndpointsForServiceProvider: connect.NewClient[v1.GetRegisteredEndpointsForServiceProviderRequest, v1.GetRegisteredEndpointsForServiceProviderResponse](
			httpClient,
			baseURL+EthServiceGetRegisteredEndpointsForServiceProviderProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpointsForServiceProvider")),
			connect.WithClientOptions(opts...),
		),
		getRegisteredEndpointInfo: connect.NewClient[v1.GetRegisteredEndpointInfoRequest, v1.GetRegisteredEndpointInfoResponse](
			httpClient,
			baseURL+EthServiceGetRegisteredEndpointInfoProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpointInfo")),
			connect.WithClientOptions(opts...),
		),
		getServiceProvider: connect.NewClient[v1.GetServiceProviderRequest, v1.GetServiceProviderResponse](
			httpClient,
			baseURL+EthServiceGetServiceProviderProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetServiceProvider")),
			connect.WithClientOptions(opts...),
		),
		getServiceProviders: connect.NewClient[v1.GetServiceProvidersRequest, v1.GetServiceProvidersResponse](
			httpClient,
			baseURL+EthServiceGetServiceProvidersProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetServiceProviders")),
			connect.WithClientOptions(opts...),
		),
		getStakingMetadataForServiceProvider: connect.NewClient[v1.GetStakingMetadataForServiceProviderRequest, v1.GetStakingMetadataForServiceProviderResponse](
			httpClient,
			baseURL+EthServiceGetStakingMetadataForServiceProviderProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetStakingMetadataForServiceProvider")),
			connect.WithClientOptions(opts...),
		),
		getLatestFundingRound: connect.NewClient[v1.GetLatestFundingRoundRequest, v1.GetLatestFundingRoundResponse](
			httpClient,
			baseURL+EthServiceGetLatestFundingRoundProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetLatestFundingRound")),
			connect.WithClientOptions(opts...),
		),
		isDuplicateDelegateWallet: connect.NewClient[v1.IsDuplicateDelegateWalletRequest, v1.IsDuplicateDelegateWalletResponse](
			httpClient,
			baseURL+EthServiceIsDuplicateDelegateWalletProcedure,
			connect.WithSchema(ethServiceMethods.ByName("IsDuplicateDelegateWallet")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+EthServiceRegisterProcedure,
			connect.WithSchema(ethServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscriptionRequest, v1.SubscriptionResponse](
			httpClient,
			baseURL+EthServiceSubscribeProcedure,
			connect.WithSchema(ethServiceMethods.ByName("Subscribe")),
			connect.WithClientOptions(opts...),
		),
		getActiveSlashProposalForAddress: connect.NewClient[v1.GetActiveSlashProposalForAddressRequest, v1.GetActiveSlashProposalForAddressResponse](
			httpClient,
			baseURL+EthServiceGetActiveSlashProposalForAddressProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetActiveSlashProposalForAddress")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ethServiceClient implements EthServiceClient.
type ethServiceClient struct {
	getStatus                                *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
	getRegisteredEndpoints                   *connect.Client[v1.GetRegisteredEndpointsRequest, v1.GetRegisteredEndpointsResponse]
	getRegisteredEndpointsForServiceProvider *connect.Client[v1.GetRegisteredEndpointsForServiceProviderRequest, v1.GetRegisteredEndpointsForServiceProviderResponse]
	getRegisteredEndpointInfo                *connect.Client[v1.GetRegisteredEndpointInfoRequest, v1.GetRegisteredEndpointInfoResponse]
	getServiceProvider                       *connect.Client[v1.GetServiceProviderRequest, v1.GetServiceProviderResponse]
	getServiceProviders                      *connect.Client[v1.GetServiceProvidersRequest, v1.GetServiceProvidersResponse]
	getStakingMetadataForServiceProvider     *connect.Client[v1.GetStakingMetadataForServiceProviderRequest, v1.GetStakingMetadataForServiceProviderResponse]
	getLatestFundingRound                    *connect.Client[v1.GetLatestFundingRoundRequest, v1.GetLatestFundingRoundResponse]
	isDuplicateDelegateWallet                *connect.Client[v1.IsDuplicateDelegateWalletRequest, v1.IsDuplicateDelegateWalletResponse]
	register                                 *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	subscribe                                *connect.Client[v1.SubscriptionRequest, v1.SubscriptionResponse]
	getActiveSlashProposalForAddress         *connect.Client[v1.GetActiveSlashProposalForAddressRequest, v1.GetActiveSlashProposalForAddressResponse]
}

// GetStatus calls eth.v1.EthService.GetStatus.
func (c *ethServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// GetRegisteredEndpoints calls eth.v1.EthService.GetRegisteredEndpoints.
func (c *ethServiceClient) GetRegisteredEndpoints(ctx context.Context, req *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error) {
	return c.getRegisteredEndpoints.CallUnary(ctx, req)
}

// GetRegisteredEndpointsForServiceProvider calls
// eth.v1.EthService.GetRegisteredEndpointsForServiceProvider.
func (c *ethServiceClient) GetRegisteredEndpointsForServiceProvider(ctx context.Context, req *connect.Request[v1.GetRegisteredEndpointsForServiceProviderRequest]) (*connect.Response[v1.GetRegisteredEndpointsForServiceProviderResponse], error) {
	return c.getRegisteredEndpointsForServiceProvider.CallUnary(ctx, req)
}

// GetRegisteredEndpointInfo calls eth.v1.EthService.GetRegisteredEndpointInfo.
func (c *ethServiceClient) GetRegisteredEndpointInfo(ctx context.Context, req *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error) {
	return c.getRegisteredEndpointInfo.CallUnary(ctx, req)
}

// GetServiceProvider calls eth.v1.EthService.GetServiceProvider.
func (c *ethServiceClient) GetServiceProvider(ctx context.Context, req *connect.Request[v1.GetServiceProviderRequest]) (*connect.Response[v1.GetServiceProviderResponse], error) {
	return c.getServiceProvider.CallUnary(ctx, req)
}

// GetServiceProviders calls eth.v1.EthService.GetServiceProviders.
func (c *ethServiceClient) GetServiceProviders(ctx context.Context, req *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error) {
	return c.getServiceProviders.CallUnary(ctx, req)
}

// GetStakingMetadataForServiceProvider calls
// eth.v1.EthService.GetStakingMetadataForServiceProvider.
func (c *ethServiceClient) GetStakingMetadataForServiceProvider(ctx context.Context, req *connect.Request[v1.GetStakingMetadataForServiceProviderRequest]) (*connect.Response[v1.GetStakingMetadataForServiceProviderResponse], error) {
	return c.getStakingMetadataForServiceProvider.CallUnary(ctx, req)
}

// GetLatestFundingRound calls eth.v1.EthService.GetLatestFundingRound.
func (c *ethServiceClient) GetLatestFundingRound(ctx context.Context, req *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error) {
	return c.getLatestFundingRound.CallUnary(ctx, req)
}

// IsDuplicateDelegateWallet calls eth.v1.EthService.IsDuplicateDelegateWallet.
func (c *ethServiceClient) IsDuplicateDelegateWallet(ctx context.Context, req *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error) {
	return c.isDuplicateDelegateWallet.CallUnary(ctx, req)
}

// Register calls eth.v1.EthService.Register.
func (c *ethServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Subscribe calls eth.v1.EthService.Subscribe.
func (c *ethServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscriptionRequest]) (*connect.ServerStreamForClient[v1.SubscriptionResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// GetActiveSlashProposalForAddress calls eth.v1.EthService.GetActiveSlashProposalForAddress.
func (c *ethServiceClient) GetActiveSlashProposalForAddress(ctx context.Context, req *connect.Request[v1.GetActiveSlashProposalForAddressRequest]) (*connect.Response[v1.GetActiveSlashProposalForAddressResponse], error) {
	return c.getActiveSlashProposalForAddress.CallUnary(ctx, req)
}

// EthServiceHandler is an implementation of the eth.v1.EthService service.
type EthServiceHandler interface {
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	GetRegisteredEndpoints(context.Context, *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error)
	GetRegisteredEndpointsForServiceProvider(context.Context, *connect.Request[v1.GetRegisteredEndpointsForServiceProviderRequest]) (*connect.Response[v1.GetRegisteredEndpointsForServiceProviderResponse], error)
	GetRegisteredEndpointInfo(context.Context, *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error)
	GetServiceProvider(context.Context, *connect.Request[v1.GetServiceProviderRequest]) (*connect.Response[v1.GetServiceProviderResponse], error)
	GetServiceProviders(context.Context, *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error)
	GetStakingMetadataForServiceProvider(context.Context, *connect.Request[v1.GetStakingMetadataForServiceProviderRequest]) (*connect.Response[v1.GetStakingMetadataForServiceProviderResponse], error)
	GetLatestFundingRound(context.Context, *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error)
	IsDuplicateDelegateWallet(context.Context, *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Subscribe(context.Context, *connect.Request[v1.SubscriptionRequest], *connect.ServerStream[v1.SubscriptionResponse]) error
	GetActiveSlashProposalForAddress(context.Context, *connect.Request[v1.GetActiveSlashProposalForAddressRequest]) (*connect.Response[v1.GetActiveSlashProposalForAddressResponse], error)
}

// NewEthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEthServiceHandler(svc EthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ethServiceMethods := v1.File_eth_v1_service_proto.Services().ByName("EthService").Methods()
	ethServiceGetStatusHandler := connect.NewUnaryHandler(
		EthServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(ethServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetRegisteredEndpointsHandler := connect.NewUnaryHandler(
		EthServiceGetRegisteredEndpointsProcedure,
		svc.GetRegisteredEndpoints,
		connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpoints")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetRegisteredEndpointsForServiceProviderHandler := connect.NewUnaryHandler(
		EthServiceGetRegisteredEndpointsForServiceProviderProcedure,
		svc.GetRegisteredEndpointsForServiceProvider,
		connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpointsForServiceProvider")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetRegisteredEndpointInfoHandler := connect.NewUnaryHandler(
		EthServiceGetRegisteredEndpointInfoProcedure,
		svc.GetRegisteredEndpointInfo,
		connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpointInfo")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetServiceProviderHandler := connect.NewUnaryHandler(
		EthServiceGetServiceProviderProcedure,
		svc.GetServiceProvider,
		connect.WithSchema(ethServiceMethods.ByName("GetServiceProvider")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetServiceProvidersHandler := connect.NewUnaryHandler(
		EthServiceGetServiceProvidersProcedure,
		svc.GetServiceProviders,
		connect.WithSchema(ethServiceMethods.ByName("GetServiceProviders")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetStakingMetadataForServiceProviderHandler := connect.NewUnaryHandler(
		EthServiceGetStakingMetadataForServiceProviderProcedure,
		svc.GetStakingMetadataForServiceProvider,
		connect.WithSchema(ethServiceMethods.ByName("GetStakingMetadataForServiceProvider")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetLatestFundingRoundHandler := connect.NewUnaryHandler(
		EthServiceGetLatestFundingRoundProcedure,
		svc.GetLatestFundingRound,
		connect.WithSchema(ethServiceMethods.ByName("GetLatestFundingRound")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceIsDuplicateDelegateWalletHandler := connect.NewUnaryHandler(
		EthServiceIsDuplicateDelegateWalletProcedure,
		svc.IsDuplicateDelegateWallet,
		connect.WithSchema(ethServiceMethods.ByName("IsDuplicateDelegateWallet")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceRegisterHandler := connect.NewUnaryHandler(
		EthServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(ethServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceSubscribeHandler := connect.NewServerStreamHandler(
		EthServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(ethServiceMethods.ByName("Subscribe")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetActiveSlashProposalForAddressHandler := connect.NewUnaryHandler(
		EthServiceGetActiveSlashProposalForAddressProcedure,
		svc.GetActiveSlashProposalForAddress,
		connect.WithSchema(ethServiceMethods.ByName("GetActiveSlashProposalForAddress")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eth.v1.EthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EthServiceGetStatusProcedure:
			ethServiceGetStatusHandler.ServeHTTP(w, r)
		case EthServiceGetRegisteredEndpointsProcedure:
			ethServiceGetRegisteredEndpointsHandler.ServeHTTP(w, r)
		case EthServiceGetRegisteredEndpointsForServiceProviderProcedure:
			ethServiceGetRegisteredEndpointsForServiceProviderHandler.ServeHTTP(w, r)
		case EthServiceGetRegisteredEndpointInfoProcedure:
			ethServiceGetRegisteredEndpointInfoHandler.ServeHTTP(w, r)
		case EthServiceGetServiceProviderProcedure:
			ethServiceGetServiceProviderHandler.ServeHTTP(w, r)
		case EthServiceGetServiceProvidersProcedure:
			ethServiceGetServiceProvidersHandler.ServeHTTP(w, r)
		case EthServiceGetStakingMetadataForServiceProviderProcedure:
			ethServiceGetStakingMetadataForServiceProviderHandler.ServeHTTP(w, r)
		case EthServiceGetLatestFundingRoundProcedure:
			ethServiceGetLatestFundingRoundHandler.ServeHTTP(w, r)
		case EthServiceIsDuplicateDelegateWalletProcedure:
			ethServiceIsDuplicateDelegateWalletHandler.ServeHTTP(w, r)
		case EthServiceRegisterProcedure:
			ethServiceRegisterHandler.ServeHTTP(w, r)
		case EthServiceSubscribeProcedure:
			ethServiceSubscribeHandler.ServeHTTP(w, r)
		case EthServiceGetActiveSlashProposalForAddressProcedure:
			ethServiceGetActiveSlashProposalForAddressHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEthServiceHandler struct{}

func (UnimplementedEthServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetStatus is not implemented"))
}

func (UnimplementedEthServiceHandler) GetRegisteredEndpoints(context.Context, *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetRegisteredEndpoints is not implemented"))
}

func (UnimplementedEthServiceHandler) GetRegisteredEndpointsForServiceProvider(context.Context, *connect.Request[v1.GetRegisteredEndpointsForServiceProviderRequest]) (*connect.Response[v1.GetRegisteredEndpointsForServiceProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetRegisteredEndpointsForServiceProvider is not implemented"))
}

func (UnimplementedEthServiceHandler) GetRegisteredEndpointInfo(context.Context, *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetRegisteredEndpointInfo is not implemented"))
}

func (UnimplementedEthServiceHandler) GetServiceProvider(context.Context, *connect.Request[v1.GetServiceProviderRequest]) (*connect.Response[v1.GetServiceProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetServiceProvider is not implemented"))
}

func (UnimplementedEthServiceHandler) GetServiceProviders(context.Context, *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetServiceProviders is not implemented"))
}

func (UnimplementedEthServiceHandler) GetStakingMetadataForServiceProvider(context.Context, *connect.Request[v1.GetStakingMetadataForServiceProviderRequest]) (*connect.Response[v1.GetStakingMetadataForServiceProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetStakingMetadataForServiceProvider is not implemented"))
}

func (UnimplementedEthServiceHandler) GetLatestFundingRound(context.Context, *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetLatestFundingRound is not implemented"))
}

func (UnimplementedEthServiceHandler) IsDuplicateDelegateWallet(context.Context, *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.IsDuplicateDelegateWallet is not implemented"))
}

func (UnimplementedEthServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.Register is not implemented"))
}

func (UnimplementedEthServiceHandler) Subscribe(context.Context, *connect.Request[v1.SubscriptionRequest], *connect.ServerStream[v1.SubscriptionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.Subscribe is not implemented"))
}

func (UnimplementedEthServiceHandler) GetActiveSlashProposalForAddress(context.Context, *connect.Request[v1.GetActiveSlashProposalForAddressRequest]) (*connect.Response[v1.GetActiveSlashProposalForAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetActiveSlashProposalForAddress is not implemented"))
}
