// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: system/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/OpenAudio/go-openaudio/pkg/api/system/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemServiceName is the fully-qualified name of the SystemService service.
	SystemServiceName = "system.v1.SystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemServicePingProcedure is the fully-qualified name of the SystemService's Ping RPC.
	SystemServicePingProcedure = "/system.v1.SystemService/Ping"
	// SystemServiceGetHealthProcedure is the fully-qualified name of the SystemService's GetHealth RPC.
	SystemServiceGetHealthProcedure = "/system.v1.SystemService/GetHealth"
)

// SystemServiceClient is a client for the system.v1.SystemService service.
type SystemServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
}

// NewSystemServiceClient constructs a client for the system.v1.SystemService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	systemServiceMethods := v1.File_system_v1_service_proto.Services().ByName("SystemService").Methods()
	return &systemServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+SystemServicePingProcedure,
			connect.WithSchema(systemServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		getHealth: connect.NewClient[v1.GetHealthRequest, v1.GetHealthResponse](
			httpClient,
			baseURL+SystemServiceGetHealthProcedure,
			connect.WithSchema(systemServiceMethods.ByName("GetHealth")),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemServiceClient implements SystemServiceClient.
type systemServiceClient struct {
	ping      *connect.Client[v1.PingRequest, v1.PingResponse]
	getHealth *connect.Client[v1.GetHealthRequest, v1.GetHealthResponse]
}

// Ping calls system.v1.SystemService.Ping.
func (c *systemServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetHealth calls system.v1.SystemService.GetHealth.
func (c *systemServiceClient) GetHealth(ctx context.Context, req *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return c.getHealth.CallUnary(ctx, req)
}

// SystemServiceHandler is an implementation of the system.v1.SystemService service.
type SystemServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
}

// NewSystemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemServiceHandler(svc SystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemServiceMethods := v1.File_system_v1_service_proto.Services().ByName("SystemService").Methods()
	systemServicePingHandler := connect.NewUnaryHandler(
		SystemServicePingProcedure,
		svc.Ping,
		connect.WithSchema(systemServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceGetHealthHandler := connect.NewUnaryHandler(
		SystemServiceGetHealthProcedure,
		svc.GetHealth,
		connect.WithSchema(systemServiceMethods.ByName("GetHealth")),
		connect.WithHandlerOptions(opts...),
	)
	return "/system.v1.SystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemServicePingProcedure:
			systemServicePingHandler.ServeHTTP(w, r)
		case SystemServiceGetHealthProcedure:
			systemServiceGetHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemServiceHandler struct{}

func (UnimplementedSystemServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.Ping is not implemented"))
}

func (UnimplementedSystemServiceHandler) GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.GetHealth is not implemented"))
}
